
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b8  080099b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080099c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000002d0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002e4  200002e4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018dbc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003994  00000000  00000000  00038e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  0003db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509e  00000000  00000000  0003ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a789  00000000  00000000  00063e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4f9  00000000  00000000  0007e5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015aab8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005228  00000000  00000000  0015ab0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069b8 	.word	0x080069b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080069b8 	.word	0x080069b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d10:	4a3d      	ldr	r2, [pc, #244]	; (8000e08 <MX_ADC1_Init+0x10c>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2c:	4b35      	ldr	r3, [pc, #212]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3a:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d3c:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <MX_ADC1_Init+0x110>)
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d48:	2205      	movs	r2, #5
 8000d4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5a:	482a      	ldr	r0, [pc, #168]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d5c:	f001 ff00 	bl	8002b60 <HAL_ADC_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f001 faf5 	bl	8002354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4822      	ldr	r0, [pc, #136]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d7c:	f002 f862 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d86:	f001 fae5 	bl	8002354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d8a:	2309      	movs	r3, #9
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	481b      	ldr	r0, [pc, #108]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000d98:	f002 f854 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000da2:	f001 fad7 	bl	8002354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000daa:	2303      	movs	r3, #3
 8000dac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000db4:	f002 f846 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000dbe:	f001 fac9 	bl	8002354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000dd0:	f002 f838 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000dda:	f001 fabb 	bl	8002354 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dde:	230c      	movs	r3, #12
 8000de0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000de2:	2305      	movs	r3, #5
 8000de4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_ADC1_Init+0x108>)
 8000dec:	f002 f82a 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000df6:	f001 faad 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000044 	.word	0x20000044
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	0f000001 	.word	0x0f000001

08000e10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3c      	ldr	r2, [pc, #240]	; (8000f20 <HAL_ADC_MspInit+0x110>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d171      	bne.n	8000f16 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2c      	ldr	r2, [pc, #176]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_ADC_MspInit+0x114>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e86:	2307      	movs	r3, #7
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4823      	ldr	r0, [pc, #140]	; (8000f28 <HAL_ADC_MspInit+0x118>)
 8000e9a:	f002 fef5 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481e      	ldr	r0, [pc, #120]	; (8000f2c <HAL_ADC_MspInit+0x11c>)
 8000eb2:	f002 fee9 	bl	8003c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_ADC_MspInit+0x124>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ee0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000efc:	f002 fb54 	bl	80035a8 <HAL_DMA_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f06:	f001 fa25 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_ADC_MspInit+0x120>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40012000 	.word	0x40012000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	2000008c 	.word	0x2000008c
 8000f34:	40026410 	.word	0x40026410

08000f38 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2108      	movs	r1, #8
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <button_init+0x14>)
 8000f42:	f003 f83d 	bl	8003fc0 <HAL_GPIO_WritePin>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020c00 	.word	0x40020c00

08000f50 <button_Scan>:

void button_Scan(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	482f      	ldr	r0, [pc, #188]	; (8001018 <button_Scan+0xc8>)
 8000f5c:	f003 f830 	bl	8003fc0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	482c      	ldr	r0, [pc, #176]	; (8001018 <button_Scan+0xc8>)
 8000f66:	f003 f82b 	bl	8003fc0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	492b      	ldr	r1, [pc, #172]	; (800101c <button_Scan+0xcc>)
 8000f70:	482b      	ldr	r0, [pc, #172]	; (8001020 <button_Scan+0xd0>)
 8000f72:	f003 ffc2 	bl	8004efa <HAL_SPI_Receive>
	  int button_index = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	e03f      	b.n	8001006 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db06      	blt.n	8000f9a <button_Scan+0x4a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	dc03      	bgt.n	8000f9a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e018      	b.n	8000fcc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	dd07      	ble.n	8000fb0 <button_Scan+0x60>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	dc04      	bgt.n	8000fb0 <button_Scan+0x60>
			  button_index = 7 - i;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f1c3 0307 	rsb	r3, r3, #7
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	e00d      	b.n	8000fcc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	dd06      	ble.n	8000fc4 <button_Scan+0x74>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0b      	cmp	r3, #11
 8000fba:	dc03      	bgt.n	8000fc4 <button_Scan+0x74>
			  button_index = i + 4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e003      	b.n	8000fcc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1c3 0317 	rsb	r3, r3, #23
 8000fca:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <button_Scan+0xcc>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	897b      	ldrh	r3, [r7, #10]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <button_Scan+0x96>
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <button_Scan+0xd4>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fe4:	e009      	b.n	8000ffa <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <button_Scan+0xd4>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <button_Scan+0xd4>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000ffa:	897b      	ldrh	r3, [r7, #10]
 8000ffc:	085b      	lsrs	r3, r3, #1
 8000ffe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	ddbc      	ble.n	8000f86 <button_Scan+0x36>
	  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020c00 	.word	0x40020c00
 800101c:	20000030 	.word	0x20000030
 8001020:	200001f8 	.word	0x200001f8
 8001024:	200000ec 	.word	0x200000ec

08001028 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <buzzer_init+0x10>)
 8001030:	f004 fca4 	bl	800597c <HAL_TIM_PWM_Start>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000250 	.word	0x20000250

0800103c <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <buzzer_SetVolume+0x28>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <buzzer_SetVolume+0x28>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <buzzer_SetVolume+0x2c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000032 	.word	0x20000032
 8001068:	20000250 	.word	0x20000250

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_DMA_Init+0x3c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <MX_DMA_Init+0x3c>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_DMA_Init+0x3c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2038      	movs	r0, #56	; 0x38
 8001094:	f002 fa51 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001098:	2038      	movs	r0, #56	; 0x38
 800109a:	f002 fa6a 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010d8:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_FSMC_Init+0xec>)
 80010da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010de:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_FSMC_Init+0xec>)
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <MX_FSMC_Init+0xf0>)
 80010e4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <MX_FSMC_Init+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <MX_FSMC_Init+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <MX_FSMC_Init+0xec>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_FSMC_Init+0xec>)
 80010fa:	2210      	movs	r2, #16
 80010fc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_FSMC_Init+0xec>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_FSMC_Init+0xec>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_FSMC_Init+0xec>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_FSMC_Init+0xec>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_FSMC_Init+0xec>)
 8001118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_FSMC_Init+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_FSMC_Init+0xec>)
 8001126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_FSMC_Init+0xec>)
 800112e:	2200      	movs	r2, #0
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_FSMC_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_FSMC_Init+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800113e:	230f      	movs	r3, #15
 8001140:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001142:	230f      	movs	r3, #15
 8001144:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001146:	233c      	movs	r3, #60	; 0x3c
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800114e:	2310      	movs	r3, #16
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001152:	2311      	movs	r3, #17
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800115a:	2308      	movs	r3, #8
 800115c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800115e:	230f      	movs	r3, #15
 8001160:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001162:	2309      	movs	r3, #9
 8001164:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800116a:	2310      	movs	r3, #16
 800116c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800116e:	2311      	movs	r3, #17
 8001170:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001176:	463a      	mov	r2, r7
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_FSMC_Init+0xec>)
 8001180:	f004 fa9e 	bl	80056c0 <HAL_SRAM_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800118a:	f001 f8e3 	bl	8002354 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000010c 	.word	0x2000010c
 800119c:	a0000104 	.word	0xa0000104

080011a0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_FSMC_MspInit+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d131      	bne.n	8001220 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_FSMC_MspInit+0x88>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_FSMC_MspInit+0x8c>)
 80011c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ca:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_FSMC_MspInit+0x8c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6393      	str	r3, [r2, #56]	; 0x38
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_FSMC_MspInit+0x8c>)
 80011d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80011de:	f64f 7388 	movw	r3, #65416	; 0xff88
 80011e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011f0:	230c      	movs	r3, #12
 80011f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <HAL_FSMC_MspInit+0x90>)
 80011fa:	f002 fd45 	bl	8003c88 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80011fe:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001202:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001210:	230c      	movs	r3, #12
 8001212:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <HAL_FSMC_MspInit+0x94>)
 800121a:	f002 fd35 	bl	8003c88 <HAL_GPIO_Init>
 800121e:	e000      	b.n	8001222 <HAL_FSMC_MspInit+0x82>
    return;
 8001220:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000034 	.word	0x20000034
 800122c:	40023800 	.word	0x40023800
 8001230:	40021000 	.word	0x40021000
 8001234:	40020c00 	.word	0x40020c00

08001238 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001240:	f7ff ffae 	bl	80011a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <MX_GPIO_Init+0x1f4>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	4b6f      	ldr	r3, [pc, #444]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a6e      	ldr	r2, [pc, #440]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a67      	ldr	r2, [pc, #412]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	4b61      	ldr	r3, [pc, #388]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a60      	ldr	r2, [pc, #384]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a59      	ldr	r2, [pc, #356]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b53      	ldr	r3, [pc, #332]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a52      	ldr	r2, [pc, #328]	; (8001440 <MX_GPIO_Init+0x1f4>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b4c      	ldr	r3, [pc, #304]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <MX_GPIO_Init+0x1f4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b45      	ldr	r3, [pc, #276]	; (8001440 <MX_GPIO_Init+0x1f4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a44      	ldr	r2, [pc, #272]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b42      	ldr	r3, [pc, #264]	; (8001440 <MX_GPIO_Init+0x1f4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2170      	movs	r1, #112	; 0x70
 8001346:	483f      	ldr	r0, [pc, #252]	; (8001444 <MX_GPIO_Init+0x1f8>)
 8001348:	f002 fe3a 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	483d      	ldr	r0, [pc, #244]	; (8001448 <MX_GPIO_Init+0x1fc>)
 8001354:	f002 fe34 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2140      	movs	r1, #64	; 0x40
 800135c:	483b      	ldr	r0, [pc, #236]	; (800144c <MX_GPIO_Init+0x200>)
 800135e:	f002 fe2f 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001368:	4839      	ldr	r0, [pc, #228]	; (8001450 <MX_GPIO_Init+0x204>)
 800136a:	f002 fe29 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2108      	movs	r1, #8
 8001372:	4838      	ldr	r0, [pc, #224]	; (8001454 <MX_GPIO_Init+0x208>)
 8001374:	f002 fe24 	bl	8003fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001378:	2370      	movs	r3, #112	; 0x70
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	482d      	ldr	r0, [pc, #180]	; (8001444 <MX_GPIO_Init+0x1f8>)
 8001390:	f002 fc7a 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4826      	ldr	r0, [pc, #152]	; (8001448 <MX_GPIO_Init+0x1fc>)
 80013ae:	f002 fc6b 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80013b2:	23c0      	movs	r3, #192	; 0xc0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4822      	ldr	r0, [pc, #136]	; (8001450 <MX_GPIO_Init+0x204>)
 80013c6:	f002 fc5f 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80013ca:	2330      	movs	r3, #48	; 0x30
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <MX_GPIO_Init+0x1fc>)
 80013de:	f002 fc53 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_GPIO_Init+0x200>)
 80013fa:	f002 fc45 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80013fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_GPIO_Init+0x204>)
 8001418:	f002 fc36 	bl	8003c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800141c:	2308      	movs	r3, #8
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_GPIO_Init+0x208>)
 8001434:	f002 fc28 	bl	8003c88 <HAL_GPIO_Init>

}
 8001438:	bf00      	nop
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40021000 	.word	0x40021000
 8001448:	40020800 	.word	0x40020800
 800144c:	40021800 	.word	0x40021800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020c00 	.word	0x40020c00

08001458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f002 fdc7 	bl	8004028 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 ff58 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000015c 	.word	0x2000015c
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_I2C_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_I2C_MspInit+0x8c>)
 800150e:	f002 fbbb 	bl	8003c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_I2C_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x88>)
 800151c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005400 	.word	0x40005400
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <LCD_WR_REG+0x1c>)
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	8013      	strh	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	600ffffe 	.word	0x600ffffe

08001564 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <LCD_WR_DATA+0x1c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	8053      	strh	r3, [r2, #2]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	600ffffe 	.word	0x600ffffe

08001584 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <LCD_RD_DATA+0x20>)
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	b29b      	uxth	r3, r3
 8001590:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b29b      	uxth	r3, r3
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	600ffffe 	.word	0x600ffffe

080015a8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4604      	mov	r4, r0
 80015b0:	4608      	mov	r0, r1
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	4623      	mov	r3, r4
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	4603      	mov	r3, r0
 80015bc:	80bb      	strh	r3, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	807b      	strh	r3, [r7, #2]
 80015c2:	4613      	mov	r3, r2
 80015c4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80015c6:	202a      	movs	r0, #42	; 0x2a
 80015c8:	f7ff ffbc 	bl	8001544 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffc6 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffc0 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffba 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffb4 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80015fc:	202b      	movs	r0, #43	; 0x2b
 80015fe:	f7ff ffa1 	bl	8001544 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffab 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ffa5 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800161a:	883b      	ldrh	r3, [r7, #0]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff9f 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001626:	883b      	ldrh	r3, [r7, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff99 	bl	8001564 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001632:	202c      	movs	r0, #44	; 0x2c
 8001634:	f7ff ff86 	bl	8001544 <LCD_WR_REG>
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}

08001640 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <lcd_Clear+0x60>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <lcd_Clear+0x60>)
 8001654:	885b      	ldrh	r3, [r3, #2]
 8001656:	3b01      	subs	r3, #1
 8001658:	b29b      	uxth	r3, r3
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff ffa3 	bl	80015a8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	81fb      	strh	r3, [r7, #14]
 8001666:	e011      	b.n	800168c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001668:	2300      	movs	r3, #0
 800166a:	81bb      	strh	r3, [r7, #12]
 800166c:	e006      	b.n	800167c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff77 	bl	8001564 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001676:	89bb      	ldrh	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	81bb      	strh	r3, [r7, #12]
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <lcd_Clear+0x60>)
 800167e:	885b      	ldrh	r3, [r3, #2]
 8001680:	89ba      	ldrh	r2, [r7, #12]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3f3      	bcc.n	800166e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	3301      	adds	r3, #1
 800168a:	81fb      	strh	r3, [r7, #14]
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <lcd_Clear+0x60>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	89fa      	ldrh	r2, [r7, #14]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3e8      	bcc.n	8001668 <lcd_Clear+0x28>
		}
	}
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200001b0 	.word	0x200001b0

080016a4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
 80016ae:	460b      	mov	r3, r1
 80016b0:	80bb      	strh	r3, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	88fa      	ldrh	r2, [r7, #6]
 80016ba:	88b9      	ldrh	r1, [r7, #4]
 80016bc:	88f8      	ldrh	r0, [r7, #6]
 80016be:	f7ff ff73 	bl	80015a8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff4d 	bl	8001564 <LCD_WR_DATA>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4604      	mov	r4, r0
 80016dc:	4608      	mov	r0, r1
 80016de:	4611      	mov	r1, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4623      	mov	r3, r4
 80016e4:	80fb      	strh	r3, [r7, #6]
 80016e6:	4603      	mov	r3, r0
 80016e8:	80bb      	strh	r3, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	70fb      	strb	r3, [r7, #3]
 80016ee:	4613      	mov	r3, r2
 80016f0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80016fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4413      	add	r3, r2
 800171e:	b29a      	uxth	r2, r3
 8001720:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001724:	b29b      	uxth	r3, r3
 8001726:	fb12 f303 	smulbb	r3, r2, r3
 800172a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	3b20      	subs	r3, #32
 8001730:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	b29a      	uxth	r2, r3
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29c      	uxth	r4, r3
 8001740:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001744:	b29a      	uxth	r2, r3
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	88b9      	ldrh	r1, [r7, #4]
 8001752:	88f8      	ldrh	r0, [r7, #6]
 8001754:	4622      	mov	r2, r4
 8001756:	f7ff ff27 	bl	80015a8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800175a:	2300      	movs	r3, #0
 800175c:	827b      	strh	r3, [r7, #18]
 800175e:	e07a      	b.n	8001856 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d028      	beq.n	80017ba <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800176c:	2b10      	cmp	r3, #16
 800176e:	d108      	bne.n	8001782 <lcd_ShowChar+0xae>
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	8a7b      	ldrh	r3, [r7, #18]
 8001774:	493c      	ldr	r1, [pc, #240]	; (8001868 <lcd_ShowChar+0x194>)
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	440a      	add	r2, r1
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	75fb      	strb	r3, [r7, #23]
 8001780:	e01b      	b.n	80017ba <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001782:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001786:	2b18      	cmp	r3, #24
 8001788:	d10b      	bne.n	80017a2 <lcd_ShowChar+0xce>
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	8a79      	ldrh	r1, [r7, #18]
 800178e:	4837      	ldr	r0, [pc, #220]	; (800186c <lcd_ShowChar+0x198>)
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4403      	add	r3, r0
 800179a:	440b      	add	r3, r1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	75fb      	strb	r3, [r7, #23]
 80017a0:	e00b      	b.n	80017ba <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80017a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d15a      	bne.n	8001860 <lcd_ShowChar+0x18c>
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	8a7b      	ldrh	r3, [r7, #18]
 80017ae:	4930      	ldr	r1, [pc, #192]	; (8001870 <lcd_ShowChar+0x19c>)
 80017b0:	0192      	lsls	r2, r2, #6
 80017b2:	440a      	add	r2, r1
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	75bb      	strb	r3, [r7, #22]
 80017be:	e044      	b.n	800184a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80017c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d120      	bne.n	800180a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80017c8:	7dfa      	ldrb	r2, [r7, #23]
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	fa42 f303 	asr.w	r3, r2, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <lcd_ShowChar+0x10e>
 80017d8:	883b      	ldrh	r3, [r7, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fec2 	bl	8001564 <LCD_WR_DATA>
 80017e0:	e003      	b.n	80017ea <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80017e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff febd 	bl	8001564 <LCD_WR_DATA>
				m++;
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	3301      	adds	r3, #1
 80017ee:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80017f8:	fb02 f201 	mul.w	r2, r2, r1
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d11f      	bne.n	8001844 <lcd_ShowChar+0x170>
				{
					m=0;
 8001804:	2300      	movs	r3, #0
 8001806:	757b      	strb	r3, [r7, #21]
					break;
 8001808:	e022      	b.n	8001850 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800180a:	7dfa      	ldrb	r2, [r7, #23]
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	fa42 f303 	asr.w	r3, r2, r3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <lcd_ShowChar+0x152>
 800181a:	883a      	ldrh	r2, [r7, #0]
 800181c:	88b9      	ldrh	r1, [r7, #4]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff3f 	bl	80016a4 <lcd_DrawPoint>
				x++;
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	3301      	adds	r3, #1
 800182a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	8a3b      	ldrh	r3, [r7, #16]
 8001830:	1ad2      	subs	r2, r2, r3
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	429a      	cmp	r2, r3
 8001836:	d105      	bne.n	8001844 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001838:	8a3b      	ldrh	r3, [r7, #16]
 800183a:	80fb      	strh	r3, [r7, #6]
					y++;
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	80bb      	strh	r3, [r7, #4]
					break;
 8001842:	e005      	b.n	8001850 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001844:	7dbb      	ldrb	r3, [r7, #22]
 8001846:	3301      	adds	r3, #1
 8001848:	75bb      	strb	r3, [r7, #22]
 800184a:	7dbb      	ldrb	r3, [r7, #22]
 800184c:	2b07      	cmp	r3, #7
 800184e:	d9b7      	bls.n	80017c0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001850:	8a7b      	ldrh	r3, [r7, #18]
 8001852:	3301      	adds	r3, #1
 8001854:	827b      	strh	r3, [r7, #18]
 8001856:	8a7a      	ldrh	r2, [r7, #18]
 8001858:	89bb      	ldrh	r3, [r7, #12]
 800185a:	429a      	cmp	r2, r3
 800185c:	d380      	bcc.n	8001760 <lcd_ShowChar+0x8c>
 800185e:	e000      	b.n	8001862 <lcd_ShowChar+0x18e>
		else return;
 8001860:	bf00      	nop
				}
			}
		}
	}
}
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	08006a10 	.word	0x08006a10
 800186c:	08007000 	.word	0x08007000
 8001870:	080081d0 	.word	0x080081d0

08001874 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001884:	2301      	movs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001888:	e004      	b.n	8001894 <mypow+0x20>
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	1e5a      	subs	r2, r3, #1
 8001898:	71ba      	strb	r2, [r7, #6]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f5      	bne.n	800188a <mypow+0x16>
	return result;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	80fb      	strh	r3, [r7, #6]
 80018be:	4603      	mov	r3, r0
 80018c0:	80bb      	strh	r3, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80018ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e059      	b.n	8001990 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80018dc:	887c      	ldrh	r4, [r7, #2]
 80018de:	787a      	ldrb	r2, [r7, #1]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4619      	mov	r1, r3
 80018ec:	200a      	movs	r0, #10
 80018ee:	f7ff ffc1 	bl	8001874 <mypow>
 80018f2:	4603      	mov	r3, r0
 80018f4:	fbb4 f1f3 	udiv	r1, r4, r3
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <lcd_ShowIntNum+0xf8>)
 80018fa:	fba3 2301 	umull	r2, r3, r3, r1
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	1aca      	subs	r2, r1, r3
 800190a:	4613      	mov	r3, r2
 800190c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d121      	bne.n	8001958 <lcd_ShowIntNum+0xac>
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	787b      	ldrb	r3, [r7, #1]
 8001918:	3b01      	subs	r3, #1
 800191a:	429a      	cmp	r2, r3
 800191c:	da1c      	bge.n	8001958 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800191e:	7b3b      	ldrb	r3, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d117      	bne.n	8001954 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	b29a      	uxth	r2, r3
 8001928:	7b7b      	ldrb	r3, [r7, #13]
 800192a:	b29b      	uxth	r3, r3
 800192c:	fb12 f303 	smulbb	r3, r2, r3
 8001930:	b29a      	uxth	r2, r3
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4413      	add	r3, r2
 8001936:	b298      	uxth	r0, r3
 8001938:	8c3a      	ldrh	r2, [r7, #32]
 800193a:	88b9      	ldrh	r1, [r7, #4]
 800193c:	2300      	movs	r3, #0
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	2220      	movs	r2, #32
 800194e:	f7ff fec1 	bl	80016d4 <lcd_ShowChar>
				continue;
 8001952:	e01a      	b.n	800198a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001954:	2301      	movs	r3, #1
 8001956:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	b29a      	uxth	r2, r3
 800195c:	7b7b      	ldrb	r3, [r7, #13]
 800195e:	b29b      	uxth	r3, r3
 8001960:	fb12 f303 	smulbb	r3, r2, r3
 8001964:	b29a      	uxth	r2, r3
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4413      	add	r3, r2
 800196a:	b298      	uxth	r0, r3
 800196c:	7b3b      	ldrb	r3, [r7, #12]
 800196e:	3330      	adds	r3, #48	; 0x30
 8001970:	b2da      	uxtb	r2, r3
 8001972:	8c3c      	ldrh	r4, [r7, #32]
 8001974:	88b9      	ldrh	r1, [r7, #4]
 8001976:	2300      	movs	r3, #0
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4623      	mov	r3, r4
 8001986:	f7ff fea5 	bl	80016d4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	3301      	adds	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	787b      	ldrb	r3, [r7, #1]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3a1      	bcc.n	80018dc <lcd_ShowIntNum+0x30>
	}
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	cccccccd 	.word	0xcccccccd

080019a8 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b08b      	sub	sp, #44	; 0x2c
 80019ac:	af04      	add	r7, sp, #16
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	81fb      	strh	r3, [r7, #14]
 80019be:	4603      	mov	r3, r0
 80019c0:	81bb      	strh	r3, [r7, #12]
 80019c2:	460b      	mov	r3, r1
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80019ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80019d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ab0 <lcd_ShowFloatNum+0x108>
 80019da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e2:	ee17 3a90 	vmov	r3, s15
 80019e6:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	75fb      	strb	r3, [r7, #23]
 80019ec:	e057      	b.n	8001a9e <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80019ee:	8abc      	ldrh	r4, [r7, #20]
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4619      	mov	r1, r3
 80019fe:	200a      	movs	r0, #10
 8001a00:	f7ff ff38 	bl	8001874 <mypow>
 8001a04:	4603      	mov	r3, r0
 8001a06:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <lcd_ShowFloatNum+0x10c>)
 8001a0c:	fba3 2301 	umull	r2, r3, r3, r1
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	1aca      	subs	r2, r1, r3
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	3b02      	subs	r3, #2
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11d      	bne.n	8001a66 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3b02      	subs	r3, #2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	7dbb      	ldrb	r3, [r7, #22]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	fb12 f303 	smulbb	r3, r2, r3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b298      	uxth	r0, r3
 8001a40:	88ba      	ldrh	r2, [r7, #4]
 8001a42:	89b9      	ldrh	r1, [r7, #12]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	222e      	movs	r2, #46	; 0x2e
 8001a56:	f7ff fe3d 	bl	80016d4 <lcd_ShowChar>
			t++;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3301      	adds	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	fb12 f303 	smulbb	r3, r2, r3
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	4413      	add	r3, r2
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	7cfb      	ldrb	r3, [r7, #19]
 8001a7c:	3330      	adds	r3, #48	; 0x30
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	88bc      	ldrh	r4, [r7, #4]
 8001a82:	89b9      	ldrh	r1, [r7, #12]
 8001a84:	2300      	movs	r3, #0
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4623      	mov	r3, r4
 8001a94:	f7ff fe1e 	bl	80016d4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
 8001a9e:	7dfa      	ldrb	r2, [r7, #23]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3a3      	bcc.n	80019ee <lcd_ShowFloatNum+0x46>
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	42c80000 	.word	0x42c80000
 8001ab4:	cccccccd 	.word	0xcccccccd

08001ab8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <lcd_SetDir+0x44>)
 8001ad4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ad8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <lcd_SetDir+0x44>)
 8001adc:	22f0      	movs	r2, #240	; 0xf0
 8001ade:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ae0:	e006      	b.n	8001af0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <lcd_SetDir+0x44>)
 8001ae4:	22f0      	movs	r2, #240	; 0xf0
 8001ae6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <lcd_SetDir+0x44>)
 8001aea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aee:	805a      	strh	r2, [r3, #2]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	200001b0 	.word	0x200001b0

08001b00 <lcd_init>:


void lcd_init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0a:	48aa      	ldr	r0, [pc, #680]	; (8001db4 <lcd_init+0x2b4>)
 8001b0c:	f002 fa58 	bl	8003fc0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b14:	f001 f800 	bl	8002b18 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	48a5      	ldr	r0, [pc, #660]	; (8001db4 <lcd_init+0x2b4>)
 8001b20:	f002 fa4e 	bl	8003fc0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b28:	f000 fff6 	bl	8002b18 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ffc3 	bl	8001ab8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001b32:	20d3      	movs	r0, #211	; 0xd3
 8001b34:	f7ff fd06 	bl	8001544 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001b38:	f7ff fd24 	bl	8001584 <LCD_RD_DATA>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b9d      	ldr	r3, [pc, #628]	; (8001db8 <lcd_init+0x2b8>)
 8001b42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b44:	f7ff fd1e 	bl	8001584 <LCD_RD_DATA>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b9a      	ldr	r3, [pc, #616]	; (8001db8 <lcd_init+0x2b8>)
 8001b4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b50:	f7ff fd18 	bl	8001584 <LCD_RD_DATA>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <lcd_init+0x2b8>)
 8001b5a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001b5c:	4b96      	ldr	r3, [pc, #600]	; (8001db8 <lcd_init+0x2b8>)
 8001b5e:	889b      	ldrh	r3, [r3, #4]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b94      	ldr	r3, [pc, #592]	; (8001db8 <lcd_init+0x2b8>)
 8001b66:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001b68:	f7ff fd0c 	bl	8001584 <LCD_RD_DATA>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <lcd_init+0x2b8>)
 8001b72:	889b      	ldrh	r3, [r3, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <lcd_init+0x2b8>)
 8001b7a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001b7c:	20cf      	movs	r0, #207	; 0xcf
 8001b7e:	f7ff fce1 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff fcee 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001b88:	20c1      	movs	r0, #193	; 0xc1
 8001b8a:	f7ff fceb 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001b8e:	2030      	movs	r0, #48	; 0x30
 8001b90:	f7ff fce8 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001b94:	20ed      	movs	r0, #237	; 0xed
 8001b96:	f7ff fcd5 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f7ff fce2 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7ff fcdf 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ba6:	2012      	movs	r0, #18
 8001ba8:	f7ff fcdc 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001bac:	2081      	movs	r0, #129	; 0x81
 8001bae:	f7ff fcd9 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001bb2:	20e8      	movs	r0, #232	; 0xe8
 8001bb4:	f7ff fcc6 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001bb8:	2085      	movs	r0, #133	; 0x85
 8001bba:	f7ff fcd3 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001bbe:	2010      	movs	r0, #16
 8001bc0:	f7ff fcd0 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001bc4:	207a      	movs	r0, #122	; 0x7a
 8001bc6:	f7ff fccd 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001bca:	20cb      	movs	r0, #203	; 0xcb
 8001bcc:	f7ff fcba 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001bd0:	2039      	movs	r0, #57	; 0x39
 8001bd2:	f7ff fcc7 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001bd6:	202c      	movs	r0, #44	; 0x2c
 8001bd8:	f7ff fcc4 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fcc1 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001be2:	2034      	movs	r0, #52	; 0x34
 8001be4:	f7ff fcbe 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7ff fcbb 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001bee:	20f7      	movs	r0, #247	; 0xf7
 8001bf0:	f7ff fca8 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001bf4:	2020      	movs	r0, #32
 8001bf6:	f7ff fcb5 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001bfa:	20ea      	movs	r0, #234	; 0xea
 8001bfc:	f7ff fca2 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fcaf 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fcac 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001c0c:	20c0      	movs	r0, #192	; 0xc0
 8001c0e:	f7ff fc99 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001c12:	201b      	movs	r0, #27
 8001c14:	f7ff fca6 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001c18:	20c1      	movs	r0, #193	; 0xc1
 8001c1a:	f7ff fc93 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fca0 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001c24:	20c5      	movs	r0, #197	; 0xc5
 8001c26:	f7ff fc8d 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001c2a:	2030      	movs	r0, #48	; 0x30
 8001c2c:	f7ff fc9a 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001c30:	2030      	movs	r0, #48	; 0x30
 8001c32:	f7ff fc97 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001c36:	20c7      	movs	r0, #199	; 0xc7
 8001c38:	f7ff fc84 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001c3c:	20b7      	movs	r0, #183	; 0xb7
 8001c3e:	f7ff fc91 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001c42:	2036      	movs	r0, #54	; 0x36
 8001c44:	f7ff fc7e 	bl	8001544 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001c48:	2008      	movs	r0, #8
 8001c4a:	f7ff fc8b 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001c4e:	203a      	movs	r0, #58	; 0x3a
 8001c50:	f7ff fc78 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001c54:	2055      	movs	r0, #85	; 0x55
 8001c56:	f7ff fc85 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001c5a:	20b1      	movs	r0, #177	; 0xb1
 8001c5c:	f7ff fc72 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fc7f 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001c66:	201a      	movs	r0, #26
 8001c68:	f7ff fc7c 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001c6c:	20b6      	movs	r0, #182	; 0xb6
 8001c6e:	f7ff fc69 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001c72:	200a      	movs	r0, #10
 8001c74:	f7ff fc76 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001c78:	20a2      	movs	r0, #162	; 0xa2
 8001c7a:	f7ff fc73 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001c7e:	20f2      	movs	r0, #242	; 0xf2
 8001c80:	f7ff fc60 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff fc6d 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001c8a:	2026      	movs	r0, #38	; 0x26
 8001c8c:	f7ff fc5a 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f7ff fc67 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001c96:	20e0      	movs	r0, #224	; 0xe0
 8001c98:	f7ff fc54 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f7ff fc61 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001ca2:	202a      	movs	r0, #42	; 0x2a
 8001ca4:	f7ff fc5e 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ca8:	2028      	movs	r0, #40	; 0x28
 8001caa:	f7ff fc5b 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cae:	2008      	movs	r0, #8
 8001cb0:	f7ff fc58 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001cb4:	200e      	movs	r0, #14
 8001cb6:	f7ff fc55 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cba:	2008      	movs	r0, #8
 8001cbc:	f7ff fc52 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001cc0:	2054      	movs	r0, #84	; 0x54
 8001cc2:	f7ff fc4f 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001cc6:	20a9      	movs	r0, #169	; 0xa9
 8001cc8:	f7ff fc4c 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ccc:	2043      	movs	r0, #67	; 0x43
 8001cce:	f7ff fc49 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f7ff fc46 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001cd8:	200f      	movs	r0, #15
 8001cda:	f7ff fc43 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff fc40 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fc3d 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fc3a 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff fc37 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001cf6:	20e1      	movs	r0, #225	; 0xe1
 8001cf8:	f7ff fc24 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff fc31 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001d02:	2015      	movs	r0, #21
 8001d04:	f7ff fc2e 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001d08:	2017      	movs	r0, #23
 8001d0a:	f7ff fc2b 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f7ff fc28 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001d14:	2011      	movs	r0, #17
 8001d16:	f7ff fc25 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	f7ff fc22 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001d20:	202b      	movs	r0, #43	; 0x2b
 8001d22:	f7ff fc1f 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001d26:	2056      	movs	r0, #86	; 0x56
 8001d28:	f7ff fc1c 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001d2c:	203c      	movs	r0, #60	; 0x3c
 8001d2e:	f7ff fc19 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001d32:	2005      	movs	r0, #5
 8001d34:	f7ff fc16 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d38:	2010      	movs	r0, #16
 8001d3a:	f7ff fc13 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f7ff fc10 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d44:	203f      	movs	r0, #63	; 0x3f
 8001d46:	f7ff fc0d 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d4a:	203f      	movs	r0, #63	; 0x3f
 8001d4c:	f7ff fc0a 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d50:	200f      	movs	r0, #15
 8001d52:	f7ff fc07 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001d56:	202b      	movs	r0, #43	; 0x2b
 8001d58:	f7ff fbf4 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff fc01 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff fbfe 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff fbfb 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001d6e:	203f      	movs	r0, #63	; 0x3f
 8001d70:	f7ff fbf8 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001d74:	202a      	movs	r0, #42	; 0x2a
 8001d76:	f7ff fbe5 	bl	8001544 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fbf2 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff fbef 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fbec 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001d8c:	20ef      	movs	r0, #239	; 0xef
 8001d8e:	f7ff fbe9 	bl	8001564 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001d92:	2011      	movs	r0, #17
 8001d94:	f7ff fbd6 	bl	8001544 <LCD_WR_REG>
	HAL_Delay(120);
 8001d98:	2078      	movs	r0, #120	; 0x78
 8001d9a:	f000 febd 	bl	8002b18 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001d9e:	2029      	movs	r0, #41	; 0x29
 8001da0:	f7ff fbd0 	bl	8001544 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <lcd_init+0x2bc>)
 8001dac:	f002 f908 	bl	8003fc0 <HAL_GPIO_WritePin>
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020800 	.word	0x40020800
 8001db8:	200001b0 	.word	0x200001b0
 8001dbc:	40020000 	.word	0x40020000

08001dc0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b08b      	sub	sp, #44	; 0x2c
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	60ba      	str	r2, [r7, #8]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	81fb      	strh	r3, [r7, #14]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	81bb      	strh	r3, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001dde:	e048      	b.n	8001e72 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d145      	bne.n	8001e72 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001de6:	89fa      	ldrh	r2, [r7, #14]
 8001de8:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <lcd_ShowStr+0xc4>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	1acb      	subs	r3, r1, r3
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dc3f      	bgt.n	8001e7c <lcd_ShowStr+0xbc>
 8001dfc:	89ba      	ldrh	r2, [r7, #12]
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <lcd_ShowStr+0xc4>)
 8001e00:	885b      	ldrh	r3, [r3, #2]
 8001e02:	4619      	mov	r1, r3
 8001e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e08:	1acb      	subs	r3, r1, r3
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dc36      	bgt.n	8001e7c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	d902      	bls.n	8001e1c <lcd_ShowStr+0x5c>
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
 8001e1a:	e02a      	b.n	8001e72 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b0d      	cmp	r3, #13
 8001e22:	d10b      	bne.n	8001e3c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001e24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	89bb      	ldrh	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001e30:	8abb      	ldrh	r3, [r7, #20]
 8001e32:	81fb      	strh	r3, [r7, #14]
					str++;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	e017      	b.n	8001e6c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	88fc      	ldrh	r4, [r7, #6]
 8001e42:	89b9      	ldrh	r1, [r7, #12]
 8001e44:	89f8      	ldrh	r0, [r7, #14]
 8001e46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4623      	mov	r3, r4
 8001e58:	f7ff fc3c 	bl	80016d4 <lcd_ShowChar>
					x+=sizey/2;
 8001e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	89fb      	ldrh	r3, [r7, #14]
 8001e68:	4413      	add	r3, r2
 8001e6a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1b2      	bne.n	8001de0 <lcd_ShowStr+0x20>
 8001e7a:	e000      	b.n	8001e7e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001e7c:	bf00      	nop
			}
		}
	}
}
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	200001b0 	.word	0x200001b0

08001e88 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <led7_Scan+0x104>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <led7_Scan+0x104>)
 8001e96:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <led7_Scan+0x108>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <led7_Scan+0x10c>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <led7_Scan+0x104>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <led7_Scan+0x104>)
 8001eb2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <led7_Scan+0x108>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d847      	bhi.n	8001f4c <led7_Scan+0xc4>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <led7_Scan+0x3c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001ef3 	.word	0x08001ef3
 8001ecc:	08001f11 	.word	0x08001f11
 8001ed0:	08001f2f 	.word	0x08001f2f
	case 0:
		spi_buffer |= 0x00b0;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <led7_Scan+0x104>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <led7_Scan+0x104>)
 8001ee0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <led7_Scan+0x104>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <led7_Scan+0x104>)
 8001eee:	801a      	strh	r2, [r3, #0]
		break;
 8001ef0:	e02d      	b.n	8001f4e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <led7_Scan+0x104>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <led7_Scan+0x104>)
 8001efe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <led7_Scan+0x104>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	f023 0320 	bic.w	r3, r3, #32
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <led7_Scan+0x104>)
 8001f0c:	801a      	strh	r2, [r3, #0]
		break;
 8001f0e:	e01e      	b.n	8001f4e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <led7_Scan+0x104>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <led7_Scan+0x104>)
 8001f1c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <led7_Scan+0x104>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f023 0310 	bic.w	r3, r3, #16
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <led7_Scan+0x104>)
 8001f2a:	801a      	strh	r2, [r3, #0]
		break;
 8001f2c:	e00f      	b.n	8001f4e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <led7_Scan+0x104>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <led7_Scan+0x104>)
 8001f3a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <led7_Scan+0x104>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <led7_Scan+0x104>)
 8001f48:	801a      	strh	r2, [r3, #0]
		break;
 8001f4a:	e000      	b.n	8001f4e <led7_Scan+0xc6>
	default:
		break;
 8001f4c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <led7_Scan+0x108>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	425a      	negs	r2, r3
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	bf58      	it	pl
 8001f60:	4253      	negpl	r3, r2
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <led7_Scan+0x108>)
 8001f64:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2140      	movs	r1, #64	; 0x40
 8001f6a:	480b      	ldr	r0, [pc, #44]	; (8001f98 <led7_Scan+0x110>)
 8001f6c:	f002 f828 	bl	8003fc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001f70:	2301      	movs	r3, #1
 8001f72:	2202      	movs	r2, #2
 8001f74:	4905      	ldr	r1, [pc, #20]	; (8001f8c <led7_Scan+0x104>)
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <led7_Scan+0x114>)
 8001f78:	f002 fe83 	bl	8004c82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <led7_Scan+0x110>)
 8001f82:	f002 f81d 	bl	8003fc0 <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000038 	.word	0x20000038
 8001f94:	20000000 	.word	0x20000000
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	200001f8 	.word	0x200001f8

08001fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa4:	f000 fd46 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa8:	f000 f828 	bl	8001ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fac:	f7ff f94e 	bl	800124c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fb0:	f000 fc06 	bl	80027c0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001fb4:	f000 fb0e 	bl	80025d4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001fb8:	f7ff f878 	bl	80010ac <MX_FSMC_Init>
  MX_I2C1_Init();
 8001fbc:	f7ff fa4c 	bl	8001458 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001fc0:	f000 fc4a 	bl	8002858 <MX_TIM13_Init>
  MX_DMA_Init();
 8001fc4:	f7ff f852 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 8001fc8:	f7fe fe98 	bl	8000cfc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001fcc:	f000 f880 	bl	80020d0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff fb35 	bl	8001640 <lcd_Clear>
  while (1)
  {
	  while(!flag_timer2);
 8001fd6:	bf00      	nop
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <main+0x58>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0fb      	beq.n	8001fd8 <main+0x38>
	  flag_timer2 = 0;
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <main+0x58>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001fe6:	f7fe ffb3 	bl	8000f50 <button_Scan>
	  test_LedDebug();
 8001fea:	f000 f883 	bl	80020f4 <test_LedDebug>
	  test_Adc();
 8001fee:	f000 f8d5 	bl	800219c <test_Adc>
	  test_Buzzer();
 8001ff2:	f000 f993 	bl	800231c <test_Buzzer>
	  while(!flag_timer2);
 8001ff6:	e7ee      	b.n	8001fd6 <main+0x36>
 8001ff8:	2000003e 	.word	0x2000003e

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2230      	movs	r2, #48	; 0x30
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fccc 	bl	80069a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <SystemClock_Config+0xcc>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <SystemClock_Config+0xcc>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <SystemClock_Config+0xcc>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <SystemClock_Config+0xd0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a21      	ldr	r2, [pc, #132]	; (80020cc <SystemClock_Config+0xd0>)
 8002046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <SystemClock_Config+0xd0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002058:	2302      	movs	r3, #2
 800205a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002060:	2310      	movs	r3, #16
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002064:	2302      	movs	r3, #2
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800206c:	2308      	movs	r3, #8
 800206e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002070:	23a8      	movs	r3, #168	; 0xa8
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002074:	2302      	movs	r3, #2
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002078:	2304      	movs	r3, #4
 800207a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207c:	f107 0320 	add.w	r3, r7, #32
 8002080:	4618      	mov	r0, r3
 8002082:	f002 f915 	bl	80042b0 <HAL_RCC_OscConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800208c:	f000 f962 	bl	8002354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002090:	230f      	movs	r3, #15
 8002092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800209c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80020a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2105      	movs	r1, #5
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fb76 	bl	80047a0 <HAL_RCC_ClockConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ba:	f000 f94b 	bl	8002354 <Error_Handler>
  }
}
 80020be:	bf00      	nop
 80020c0:	3750      	adds	r7, #80	; 0x50
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000

080020d0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	  timer_init();
 80020d4:	f000 fa2e 	bl	8002534 <timer_init>
	  button_init();
 80020d8:	f7fe ff2e 	bl	8000f38 <button_init>
	  lcd_init();
 80020dc:	f7ff fd10 	bl	8001b00 <lcd_init>
	  sensor_init();
 80020e0:	f000 f93e 	bl	8002360 <sensor_init>
	  buzzer_init();
 80020e4:	f7fe ffa0 	bl	8001028 <buzzer_init>
	  setTimer2(50);
 80020e8:	2032      	movs	r0, #50	; 0x32
 80020ea:	f000 fa2d 	bl	8002548 <setTimer2>
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <test_LedDebug+0x3c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <test_LedDebug+0x40>)
 8002100:	fb83 1302 	smull	r1, r3, r3, r2
 8002104:	10d9      	asrs	r1, r3, #3
 8002106:	17d3      	asrs	r3, r2, #31
 8002108:	1ac9      	subs	r1, r1, r3
 800210a:	460b      	mov	r3, r1
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	1ad1      	subs	r1, r2, r3
 8002114:	b2ca      	uxtb	r2, r1
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <test_LedDebug+0x3c>)
 8002118:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <test_LedDebug+0x3c>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002122:	2110      	movs	r1, #16
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <test_LedDebug+0x44>)
 8002126:	f001 ff64 	bl	8003ff2 <HAL_GPIO_TogglePin>
	}
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000003c 	.word	0x2000003c
 8002134:	66666667 	.word	0x66666667
 8002138:	40021000 	.word	0x40021000

0800213c <isButtonUp>:

uint8_t isButtonUp()
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <isButtonUp+0x1c>)
 8002142:	88db      	ldrh	r3, [r3, #6]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <isButtonUp+0x10>
        return 1;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <isButtonUp+0x12>
    else
        return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	200000ec 	.word	0x200000ec

0800215c <isButtonDown>:

uint8_t isButtonDown()
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <isButtonDown+0x1c>)
 8002162:	89db      	ldrh	r3, [r3, #14]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <isButtonDown+0x10>
        return 1;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <isButtonDown+0x12>
    else
        return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	200000ec 	.word	0x200000ec

0800217c <isButtonRight>:

uint8_t isButtonRight()
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <isButtonRight+0x1c>)
 8002182:	8adb      	ldrh	r3, [r3, #22]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <isButtonRight+0x10>
        return 1;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <isButtonRight+0x12>
    else
        return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	200000ec 	.word	0x200000ec

0800219c <test_Adc>:

uint8_t count_adc = 0;

void test_Adc(){
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <test_Adc+0x164>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <test_Adc+0x168>)
 80021aa:	fb83 1302 	smull	r1, r3, r3, r2
 80021ae:	10d9      	asrs	r1, r3, #3
 80021b0:	17d3      	asrs	r3, r2, #31
 80021b2:	1ac9      	subs	r1, r1, r3
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	1ad1      	subs	r1, r2, r3
 80021be:	b2ca      	uxtb	r2, r1
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <test_Adc+0x164>)
 80021c2:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <test_Adc+0x164>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 8096 	bne.w	80022fa <test_Adc+0x15e>
		sensor_Read();
 80021ce:	f000 f8d5 	bl	800237c <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80021d2:	2300      	movs	r3, #0
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	2310      	movs	r3, #16
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	2300      	movs	r3, #0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021e2:	4a49      	ldr	r2, [pc, #292]	; (8002308 <test_Adc+0x16c>)
 80021e4:	2164      	movs	r1, #100	; 0x64
 80021e6:	200a      	movs	r0, #10
 80021e8:	f7ff fdea 	bl	8001dc0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 100,sensor_GetVoltage(), 4, RED, BLACK, 16);
 80021ec:	f000 f8ec 	bl	80023c8 <sensor_GetVoltage>
 80021f0:	eef0 7a40 	vmov.f32	s15, s0
 80021f4:	2310      	movs	r3, #16
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002200:	2204      	movs	r2, #4
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	2082      	movs	r0, #130	; 0x82
 800220a:	f7ff fbcd 	bl	80019a8 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 800220e:	2300      	movs	r3, #0
 8002210:	9302      	str	r3, [sp, #8]
 8002212:	2310      	movs	r3, #16
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2300      	movs	r3, #0
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800221e:	4a3b      	ldr	r2, [pc, #236]	; (800230c <test_Adc+0x170>)
 8002220:	2178      	movs	r1, #120	; 0x78
 8002222:	200a      	movs	r0, #10
 8002224:	f7ff fdcc 	bl	8001dc0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 120,sensor_GetCurrent(), 4, RED, BLACK, 16);
 8002228:	f000 f90a 	bl	8002440 <sensor_GetCurrent>
 800222c:	eef0 7a40 	vmov.f32	s15, s0
 8002230:	2310      	movs	r3, #16
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800223c:	2204      	movs	r2, #4
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	2178      	movs	r1, #120	; 0x78
 8002244:	2082      	movs	r0, #130	; 0x82
 8002246:	f7ff fbaf 	bl	80019a8 <lcd_ShowFloatNum>
		lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
 800224a:	2300      	movs	r3, #0
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2310      	movs	r3, #16
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800225a:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <test_Adc+0x174>)
 800225c:	218c      	movs	r1, #140	; 0x8c
 800225e:	200a      	movs	r0, #10
 8002260:	f7ff fdae 	bl	8001dc0 <lcd_ShowStr>
		lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
 8002264:	f000 f898 	bl	8002398 <sensor_GetLight>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	2310      	movs	r3, #16
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2304      	movs	r3, #4
 800227c:	218c      	movs	r1, #140	; 0x8c
 800227e:	2082      	movs	r0, #130	; 0x82
 8002280:	f7ff fb14 	bl	80018ac <lcd_ShowIntNum>
		lcd_ShowStr(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8002284:	2300      	movs	r3, #0
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2310      	movs	r3, #16
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2300      	movs	r3, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <test_Adc+0x178>)
 8002296:	21a0      	movs	r1, #160	; 0xa0
 8002298:	200a      	movs	r0, #10
 800229a:	f7ff fd91 	bl	8001dc0 <lcd_ShowStr>
		lcd_ShowIntNum(130, 160, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 800229e:	f000 f887 	bl	80023b0 <sensor_GetPotentiometer>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	2310      	movs	r3, #16
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	2300      	movs	r3, #0
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2304      	movs	r3, #4
 80022b6:	21a0      	movs	r1, #160	; 0xa0
 80022b8:	2082      	movs	r0, #130	; 0x82
 80022ba:	f7ff faf7 	bl	80018ac <lcd_ShowIntNum>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80022be:	2300      	movs	r3, #0
 80022c0:	9302      	str	r3, [sp, #8]
 80022c2:	2310      	movs	r3, #16
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <test_Adc+0x17c>)
 80022d0:	21b4      	movs	r1, #180	; 0xb4
 80022d2:	200a      	movs	r0, #10
 80022d4:	f7ff fd74 	bl	8001dc0 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80022d8:	f000 f90e 	bl	80024f8 <sensor_GetTemperature>
 80022dc:	eef0 7a40 	vmov.f32	s15, s0
 80022e0:	2310      	movs	r3, #16
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	2300      	movs	r3, #0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ec:	2204      	movs	r2, #4
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	21b4      	movs	r1, #180	; 0xb4
 80022f4:	2082      	movs	r0, #130	; 0x82
 80022f6:	f7ff fb57 	bl	80019a8 <lcd_ShowFloatNum>
	}
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000003d 	.word	0x2000003d
 8002304:	66666667 	.word	0x66666667
 8002308:	080069d0 	.word	0x080069d0
 800230c:	080069dc 	.word	0x080069dc
 8002310:	080069e8 	.word	0x080069e8
 8002314:	080069f0 	.word	0x080069f0
 8002318:	08006a00 	.word	0x08006a00

0800231c <test_Buzzer>:

void test_Buzzer(){
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002320:	f7ff ff0c 	bl	800213c <isButtonUp>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 800232a:	2032      	movs	r0, #50	; 0x32
 800232c:	f7fe fe86 	bl	800103c <buzzer_SetVolume>
	}

	if(isButtonDown()){
 8002330:	f7ff ff14 	bl	800215c <isButtonDown>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 800233a:	2000      	movs	r0, #0
 800233c:	f7fe fe7e 	bl	800103c <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002340:	f7ff ff1c 	bl	800217c <isButtonRight>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 800234a:	2019      	movs	r0, #25
 800234c:	f7fe fe76 	bl	800103c <buzzer_SetVolume>
	}

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002364:	2205      	movs	r2, #5
 8002366:	4903      	ldr	r1, [pc, #12]	; (8002374 <sensor_init+0x14>)
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <sensor_init+0x18>)
 800236a:	f000 fc3d 	bl	8002be8 <HAL_ADC_Start_DMA>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200001ec 	.word	0x200001ec
 8002378:	20000044 	.word	0x20000044

0800237c <sensor_Read>:

void sensor_Read(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002380:	2205      	movs	r2, #5
 8002382:	4903      	ldr	r1, [pc, #12]	; (8002390 <sensor_Read+0x14>)
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <sensor_Read+0x18>)
 8002386:	f000 fc2f 	bl	8002be8 <HAL_ADC_Start_DMA>
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200001ec 	.word	0x200001ec
 8002394:	20000044 	.word	0x20000044

08002398 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <sensor_GetLight+0x14>)
 800239e:	889b      	ldrh	r3, [r3, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200001ec 	.word	0x200001ec

080023b0 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <sensor_GetPotentiometer+0x14>)
 80023b6:	88db      	ldrh	r3, [r3, #6]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200001ec 	.word	0x200001ec

080023c8 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <sensor_GetVoltage+0x70>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d8:	ee17 0a90 	vmov	r0, s15
 80023dc:	f7fe f858 	bl	8000490 <__aeabi_f2d>
 80023e0:	a311      	add	r3, pc, #68	; (adr r3, 8002428 <sensor_GetVoltage+0x60>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f8ab 	bl	8000540 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <sensor_GetVoltage+0x74>)
 80023f8:	f7fe f8a2 	bl	8000540 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	a30a      	add	r3, pc, #40	; (adr r3, 8002430 <sensor_GetVoltage+0x68>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe f9c3 	bl	8000794 <__aeabi_ddiv>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe faa5 	bl	8000964 <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	ee07 3a90 	vmov	s15, r3
}
 8002420:	eeb0 0a67 	vmov.f32	s0, s15
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	66666666 	.word	0x66666666
 800242c:	400a6666 	.word	0x400a6666
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40b908ac 	.word	0x40b908ac
 8002438:	200001ec 	.word	0x200001ec
 800243c:	40280000 	.word	0x40280000

08002440 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <sensor_GetCurrent+0xa8>)
 8002446:	885b      	ldrh	r3, [r3, #2]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002450:	ee17 0a90 	vmov	r0, s15
 8002454:	f7fe f81c 	bl	8000490 <__aeabi_f2d>
 8002458:	a31f      	add	r3, pc, #124	; (adr r3, 80024d8 <sensor_GetCurrent+0x98>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f86f 	bl	8000540 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <sensor_GetCurrent+0xac>)
 8002470:	f7fe f866 	bl	8000540 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	a318      	add	r3, pc, #96	; (adr r3, 80024e0 <sensor_GetCurrent+0xa0>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f987 	bl	8000794 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <sensor_GetCurrent+0xb0>)
 8002494:	f7fd fe9c 	bl	80001d0 <__aeabi_dsub>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <sensor_GetCurrent+0xb4>)
 80024a6:	f7fe f84b 	bl	8000540 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <sensor_GetCurrent+0xb0>)
 80024b8:	f7fe f96c 	bl	8000794 <__aeabi_ddiv>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fa4e 	bl	8000964 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	ee07 3a90 	vmov	s15, r3
}
 80024ce:	eeb0 0a67 	vmov.f32	s0, s15
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f3af 8000 	nop.w
 80024d8:	66666666 	.word	0x66666666
 80024dc:	400a6666 	.word	0x400a6666
 80024e0:	147ae148 	.word	0x147ae148
 80024e4:	40a4b2ee 	.word	0x40a4b2ee
 80024e8:	200001ec 	.word	0x200001ec
 80024ec:	408f4000 	.word	0x408f4000
 80024f0:	40040000 	.word	0x40040000
 80024f4:	40140000 	.word	0x40140000

080024f8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <sensor_GetTemperature+0x30>)
 80024fe:	891b      	ldrh	r3, [r3, #8]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002508:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800252c <sensor_GetTemperature+0x34>
 800250c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002530 <sensor_GetTemperature+0x38>
 8002514:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002518:	eef0 7a66 	vmov.f32	s15, s13
}
 800251c:	eeb0 0a67 	vmov.f32	s0, s15
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	200001ec 	.word	0x200001ec
 800252c:	43a50000 	.word	0x43a50000
 8002530:	457ff000 	.word	0x457ff000

08002534 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <timer_init+0x10>)
 800253a:	f003 f955 	bl	80057e8 <HAL_TIM_Base_Start_IT>
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000298 	.word	0x20000298

08002548 <setTimer2>:

void setTimer2(uint16_t duration){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <setTimer2+0x2c>)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <setTimer2+0x2c>)
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <setTimer2+0x30>)
 800255e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <setTimer2+0x34>)
 8002562:	2200      	movs	r2, #0
 8002564:	801a      	strh	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000042 	.word	0x20000042
 8002578:	20000040 	.word	0x20000040
 800257c:	2000003e 	.word	0x2000003e

08002580 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002590:	d116      	bne.n	80025c0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025a4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025ba:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80025bc:	f7ff fc64 	bl	8001e88 <led7_Scan>
	}
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000040 	.word	0x20000040
 80025cc:	2000003e 	.word	0x2000003e
 80025d0:	20000042 	.word	0x20000042

080025d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <MX_SPI1_Init+0x64>)
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <MX_SPI1_Init+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_SPI1_Init+0x64>)
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_SPI1_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <MX_SPI1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_SPI1_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_SPI1_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_SPI1_Init+0x64>)
 8002600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002604:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_SPI1_Init+0x64>)
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <MX_SPI1_Init+0x64>)
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_SPI1_Init+0x64>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <MX_SPI1_Init+0x64>)
 800261a:	2200      	movs	r2, #0
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_SPI1_Init+0x64>)
 8002620:	220a      	movs	r2, #10
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <MX_SPI1_Init+0x64>)
 8002626:	f002 faa3 	bl	8004b70 <HAL_SPI_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002630:	f7ff fe90 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200001f8 	.word	0x200001f8
 800263c:	40013000 	.word	0x40013000

08002640 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_SPI_MspInit+0x84>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 800266c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_SPI_MspInit+0x88>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800269a:	2338      	movs	r3, #56	; 0x38
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026aa:	2305      	movs	r3, #5
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <HAL_SPI_MspInit+0x8c>)
 80026b6:	f001 fae7 	bl	8003c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40013000 	.word	0x40013000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020400 	.word	0x40020400

080026d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <NMI_Handler+0x4>

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler+0x4>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <UsageFault_Handler+0x4>

0800273e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f000 f9b4 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <TIM2_IRQHandler+0x10>)
 800277a:	f003 f9c7 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000298 	.word	0x20000298

08002788 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <DMA2_Stream0_IRQHandler+0x10>)
 800278e:	f001 f811 	bl	80037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000008c 	.word	0x2000008c

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <SystemInit+0x20>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <SystemInit+0x20>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	463b      	mov	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_TIM2_Init+0x94>)
 80027de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_TIM2_Init+0x94>)
 80027e6:	f240 3247 	movw	r2, #839	; 0x347
 80027ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MX_TIM2_Init+0x94>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_TIM2_Init+0x94>)
 80027f4:	2263      	movs	r2, #99	; 0x63
 80027f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_TIM2_Init+0x94>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <MX_TIM2_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002804:	4813      	ldr	r0, [pc, #76]	; (8002854 <MX_TIM2_Init+0x94>)
 8002806:	f002 ff9f 	bl	8005748 <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002810:	f7ff fda0 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <MX_TIM2_Init+0x94>)
 8002822:	f003 fb3d 	bl	8005ea0 <HAL_TIM_ConfigClockSource>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800282c:	f7ff fd92 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM2_Init+0x94>)
 800283e:	f003 ff2f 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002848:	f7ff fd84 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000298 	.word	0x20000298

08002858 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002870:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <MX_TIM13_Init+0x94>)
 8002872:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <MX_TIM13_Init+0x98>)
 8002874:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_TIM13_Init+0x94>)
 8002878:	f240 3247 	movw	r2, #839	; 0x347
 800287c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <MX_TIM13_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002884:	4b19      	ldr	r3, [pc, #100]	; (80028ec <MX_TIM13_Init+0x94>)
 8002886:	2263      	movs	r2, #99	; 0x63
 8002888:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <MX_TIM13_Init+0x94>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <MX_TIM13_Init+0x94>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002896:	4815      	ldr	r0, [pc, #84]	; (80028ec <MX_TIM13_Init+0x94>)
 8002898:	f002 ff56 	bl	8005748 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80028a2:	f7ff fd57 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80028a6:	4811      	ldr	r0, [pc, #68]	; (80028ec <MX_TIM13_Init+0x94>)
 80028a8:	f003 f80e 	bl	80058c8 <HAL_TIM_PWM_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80028b2:	f7ff fd4f 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b6:	2360      	movs	r3, #96	; 0x60
 80028b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	4619      	mov	r1, r3
 80028cc:	4807      	ldr	r0, [pc, #28]	; (80028ec <MX_TIM13_Init+0x94>)
 80028ce:	f003 fa25 	bl	8005d1c <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80028d8:	f7ff fd3c 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <MX_TIM13_Init+0x94>)
 80028de:	f000 f845 	bl	800296c <HAL_TIM_MspPostInit>

}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000250 	.word	0x20000250
 80028f0:	40001c00 	.word	0x40001c00

080028f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d116      	bne.n	8002934 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	201c      	movs	r0, #28
 8002928:	f000 fe07 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800292c:	201c      	movs	r0, #28
 800292e:	f000 fe20 	bl	8003572 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002932:	e012      	b.n	800295a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_TIM_Base_MspInit+0x74>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10d      	bne.n	800295a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_TIM_Base_MspInit+0x70>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40001c00 	.word	0x40001c00

0800296c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_TIM_MspPostInit+0x68>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d11e      	bne.n	80029cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_TIM_MspPostInit+0x6c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_TIM_MspPostInit+0x6c>)
 8002998:	f043 0320 	orr.w	r3, r3, #32
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_TIM_MspPostInit+0x6c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80029bc:	2309      	movs	r3, #9
 80029be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <HAL_TIM_MspPostInit+0x70>)
 80029c8:	f001 f95e 	bl	8003c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40001c00 	.word	0x40001c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40021400 	.word	0x40021400

080029e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a0a:	f7ff fec7 	bl	800279c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f003 ffa7 	bl	8006960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a12:	f7ff fac5 	bl	8001fa0 <main>
  bx  lr    
 8002a16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002a24:	080099c0 	.word	0x080099c0
  ldr r2, =_sbss
 8002a28:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002a2c:	200002e4 	.word	0x200002e4

08002a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC_IRQHandler>
	...

08002a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_Init+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_Init+0x40>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_Init+0x40>)
 8002a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_Init+0x40>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f000 fd61 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	200f      	movs	r0, #15
 8002a64:	f000 f808 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f7ff fe32 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x54>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd79 	bl	800358e <HAL_SYSTICK_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00e      	b.n	8002ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d80a      	bhi.n	8002ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f000 fd41 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_InitTick+0x5c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_IncTick+0x20>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x24>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_IncTick+0x24>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010
 8002afc:	200002e0 	.word	0x200002e0

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetTick+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200002e0 	.word	0x200002e0

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff ffee 	bl	8002b00 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d005      	beq.n	8002b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_Delay+0x44>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b3e:	bf00      	nop
 8002b40:	f7ff ffde 	bl	8002b00 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d8f7      	bhi.n	8002b40 <HAL_Delay+0x28>
  {
  }
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000010 	.word	0x20000010

08002b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e033      	b.n	8002bde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f946 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ba6:	f023 0302 	bic.w	r3, r3, #2
 8002baa:	f043 0202 	orr.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa68 	bl	8003088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bce:	e001      	b.n	8002bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Start_DMA+0x1e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0e9      	b.n	8002dda <HAL_ADC_Start_DMA+0x1f2>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d018      	beq.n	8002c4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2c:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_ADC_Start_DMA+0x1fc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_ADC_Start_DMA+0x200>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9a      	lsrs	r2, r3, #18
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5c:	d107      	bne.n	8002c6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 80a1 	bne.w	8002dc0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f023 0206 	bic.w	r2, r3, #6
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002cdc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_ADC_Start_DMA+0x208>)
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_ADC_Start_DMA+0x20c>)
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <HAL_ADC_Start_DMA+0x210>)
 8002cf4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	334c      	adds	r3, #76	; 0x4c
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f000 fce8 	bl	8003704 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12a      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <HAL_ADC_Start_DMA+0x214>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d015      	beq.n	8002d76 <HAL_ADC_Start_DMA+0x18e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <HAL_ADC_Start_DMA+0x218>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_Start_DMA+0x178>
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_ADC_Start_DMA+0x21c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d136      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d129      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e020      	b.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_ADC_Start_DMA+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008
 8002de8:	431bde83 	.word	0x431bde83
 8002dec:	40012300 	.word	0x40012300
 8002df0:	08003281 	.word	0x08003281
 8002df4:	0800333b 	.word	0x0800333b
 8002df8:	08003357 	.word	0x08003357
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012100 	.word	0x40012100
 8002e04:	40012200 	.word	0x40012200

08002e08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e105      	b.n	800306c <HAL_ADC_ConfigChannel+0x228>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d925      	bls.n	8002ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	3b1e      	subs	r3, #30
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4403      	add	r3, r0
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	e022      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4403      	add	r3, r0
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d824      	bhi.n	8002f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b05      	subs	r3, #5
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b05      	subs	r3, #5
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e04c      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b23      	subs	r3, #35	; 0x23
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b23      	subs	r3, #35	; 0x23
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa4:	e023      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	; 0x41
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b41      	subs	r3, #65	; 0x41
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_ADC_ConfigChannel+0x234>)
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d105      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d123      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d003      	beq.n	800302a <HAL_ADC_ConfigChannel+0x1e6>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b11      	cmp	r3, #17
 8003028:	d11b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b10      	cmp	r3, #16
 800303c:	d111      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_ADC_ConfigChannel+0x23c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_ADC_ConfigChannel+0x240>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9a      	lsrs	r2, r3, #18
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003054:	e002      	b.n	800305c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f9      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012300 	.word	0x40012300
 800307c:	40012000 	.word	0x40012000
 8003080:	20000008 	.word	0x20000008
 8003084:	431bde83 	.word	0x431bde83

08003088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003090:	4b79      	ldr	r3, [pc, #484]	; (8003278 <ADC_Init+0x1f0>)
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	021a      	lsls	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4a58      	ldr	r2, [pc, #352]	; (800327c <ADC_Init+0x1f4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800312e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e00f      	b.n	8003186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0202 	bic.w	r2, r2, #2
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	035a      	lsls	r2, r3, #13
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e007      	b.n	80031fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	3b01      	subs	r3, #1
 8003218:	051a      	lsls	r2, r3, #20
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323e:	025a      	lsls	r2, r3, #9
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	029a      	lsls	r2, r3, #10
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012300 	.word	0x40012300
 800327c:	0f000001 	.word	0x0f000001

08003280 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d13c      	bne.n	8003314 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12b      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d127      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d119      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0220 	bic.w	r2, r2, #32
 80032e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fd7b 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003312:	e00e      	b.n	8003332 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fd85 	bl	8002e30 <HAL_ADC_ErrorCallback>
}
 8003326:	e004      	b.n	8003332 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fd67 	bl	8002e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0204 	orr.w	r2, r3, #4
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff fd5a 	bl	8002e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff3e 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff31 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffa2 	bl	80034e0 <SysTick_Config>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff faa4 	bl	8002b00 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e099      	b.n	80036f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e4:	e00f      	b.n	8003606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e6:	f7ff fa8b 	bl	8002b00 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d908      	bls.n	8003606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2203      	movs	r2, #3
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e078      	b.n	80036f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e8      	bne.n	80035e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4b38      	ldr	r3, [pc, #224]	; (8003700 <HAL_DMA_Init+0x158>)
 8003620:	4013      	ands	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2b04      	cmp	r3, #4
 800365e:	d107      	bne.n	8003670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4313      	orrs	r3, r2
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b04      	cmp	r3, #4
 8003698:	d117      	bne.n	80036ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa6f 	bl	8003b90 <DMA_CheckFifoParam>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036c6:	2301      	movs	r3, #1
 80036c8:	e016      	b.n	80036f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa26 	bl	8003b24 <DMA_CalcBaseAndBitshift>
 80036d8:	4603      	mov	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	f010803f 	.word	0xf010803f

08003704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_DMA_Start_IT+0x26>
 8003726:	2302      	movs	r3, #2
 8003728:	e040      	b.n	80037ac <HAL_DMA_Start_IT+0xa8>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d12f      	bne.n	800379e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9b8 	bl	8003ac8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0216 	orr.w	r2, r2, #22
 8003772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e005      	b.n	80037aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c0:	4b92      	ldr	r3, [pc, #584]	; (8003a0c <HAL_DMA_IRQHandler+0x258>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <HAL_DMA_IRQHandler+0x25c>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	2208      	movs	r2, #8
 80037e0:	409a      	lsls	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	2208      	movs	r2, #8
 800380e:	409a      	lsls	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	2201      	movs	r2, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d012      	beq.n	8003856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 0202 	orr.w	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	2204      	movs	r2, #4
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2204      	movs	r2, #4
 800387a:	409a      	lsls	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	2210      	movs	r2, #16
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d043      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03c      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	2210      	movs	r2, #16
 80038b0:	409a      	lsls	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d024      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
 80038e2:	e01f      	b.n	8003924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
 80038f4:	e016      	b.n	8003924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0208 	bic.w	r2, r2, #8
 8003912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	2220      	movs	r2, #32
 800392a:	409a      	lsls	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 808e 	beq.w	8003a52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8086 	beq.w	8003a52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2220      	movs	r2, #32
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b05      	cmp	r3, #5
 800395c:	d136      	bne.n	80039cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0216 	bic.w	r2, r2, #22
 800396c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_DMA_IRQHandler+0x1da>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0208 	bic.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	223f      	movs	r2, #63	; 0x3f
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d07d      	beq.n	8003abe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
        }
        return;
 80039ca:	e078      	b.n	8003abe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d108      	bne.n	80039fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d030      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
 80039f8:	e02b      	b.n	8003a52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
 8003a0a:	e022      	b.n	8003a52 <HAL_DMA_IRQHandler+0x29e>
 8003a0c:	20000008 	.word	0x20000008
 8003a10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0210 	bic.w	r2, r2, #16
 8003a30:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d032      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d307      	bcc.n	8003a9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f2      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x2ca>
 8003a98:	e000      	b.n	8003a9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a9a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
 8003abc:	e000      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003abe:	bf00      	nop
    }
  }
}
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop

08003ac8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d108      	bne.n	8003b08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b06:	e007      	b.n	8003b18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	60da      	str	r2, [r3, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3b10      	subs	r3, #16
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <DMA_CalcBaseAndBitshift+0x64>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b3e:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <DMA_CalcBaseAndBitshift+0x68>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d909      	bls.n	8003b66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	659a      	str	r2, [r3, #88]	; 0x58
 8003b64:	e007      	b.n	8003b76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	aaaaaaab 	.word	0xaaaaaaab
 8003b8c:	080099a8 	.word	0x080099a8

08003b90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d11f      	bne.n	8003bea <DMA_CheckFifoParam+0x5a>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d856      	bhi.n	8003c5e <DMA_CheckFifoParam+0xce>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <DMA_CheckFifoParam+0x28>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bdb 	.word	0x08003bdb
 8003bc0:	08003bc9 	.word	0x08003bc9
 8003bc4:	08003c5f 	.word	0x08003c5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d046      	beq.n	8003c62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd8:	e043      	b.n	8003c62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be2:	d140      	bne.n	8003c66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e03d      	b.n	8003c66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf2:	d121      	bne.n	8003c38 <DMA_CheckFifoParam+0xa8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d837      	bhi.n	8003c6a <DMA_CheckFifoParam+0xda>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <DMA_CheckFifoParam+0x70>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c17 	.word	0x08003c17
 8003c08:	08003c11 	.word	0x08003c11
 8003c0c:	08003c29 	.word	0x08003c29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e030      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d025      	beq.n	8003c6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e022      	b.n	8003c6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c30:	d11f      	bne.n	8003c72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c36:	e01c      	b.n	8003c72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d903      	bls.n	8003c46 <DMA_CheckFifoParam+0xb6>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d003      	beq.n	8003c4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c44:	e018      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4a:	e015      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00e      	beq.n	8003c76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e00b      	b.n	8003c76 <DMA_CheckFifoParam+0xe6>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e00a      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e008      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e006      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e004      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
    }
  } 
  
  return status; 
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	e16b      	b.n	8003f7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f040 815a 	bne.w	8003f76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d005      	beq.n	8003cda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d130      	bne.n	8003d3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d10:	2201      	movs	r2, #1
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 0201 	and.w	r2, r3, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d017      	beq.n	8003d78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80b4 	beq.w	8003f76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b60      	ldr	r3, [pc, #384]	; (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_GPIO_Init+0x30c>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2a:	4a5b      	ldr	r2, [pc, #364]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	3302      	adds	r3, #2
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_GPIO_Init+0x314>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d02b      	beq.n	8003eae <HAL_GPIO_Init+0x226>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a51      	ldr	r2, [pc, #324]	; (8003fa0 <HAL_GPIO_Init+0x318>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d025      	beq.n	8003eaa <HAL_GPIO_Init+0x222>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_GPIO_Init+0x31c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <HAL_GPIO_Init+0x21e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4f      	ldr	r2, [pc, #316]	; (8003fa8 <HAL_GPIO_Init+0x320>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d019      	beq.n	8003ea2 <HAL_GPIO_Init+0x21a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4e      	ldr	r2, [pc, #312]	; (8003fac <HAL_GPIO_Init+0x324>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_GPIO_Init+0x216>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4d      	ldr	r2, [pc, #308]	; (8003fb0 <HAL_GPIO_Init+0x328>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <HAL_GPIO_Init+0x212>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4c      	ldr	r2, [pc, #304]	; (8003fb4 <HAL_GPIO_Init+0x32c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <HAL_GPIO_Init+0x20e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4b      	ldr	r2, [pc, #300]	; (8003fb8 <HAL_GPIO_Init+0x330>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_GPIO_Init+0x20a>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00e      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e92:	2308      	movs	r3, #8
 8003e94:	e00c      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e96:	2306      	movs	r3, #6
 8003e98:	e00a      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	e008      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	e006      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e004      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_Init+0x228>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	f002 0203 	and.w	r2, r2, #3
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	4093      	lsls	r3, r2
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ec0:	4935      	ldr	r1, [pc, #212]	; (8003f98 <HAL_GPIO_Init+0x310>)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f70:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <HAL_GPIO_Init+0x334>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	f67f ae90 	bls.w	8003ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3724      	adds	r7, #36	; 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40020000 	.word	0x40020000
 8003fa0:	40020400 	.word	0x40020400
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40020c00 	.word	0x40020c00
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40021400 	.word	0x40021400
 8003fb4:	40021800 	.word	0x40021800
 8003fb8:	40021c00 	.word	0x40021c00
 8003fbc:	40013c00 	.word	0x40013c00

08003fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd0:	787b      	ldrb	r3, [r7, #1]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fdc:	e003      	b.n	8003fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	041a      	lsls	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	619a      	str	r2, [r3, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4013      	ands	r3, r2
 800400a:	041a      	lsls	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43d9      	mvns	r1, r3
 8004010:	887b      	ldrh	r3, [r7, #2]
 8004012:	400b      	ands	r3, r1
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e12b      	b.n	8004292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fa30 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800408a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800408c:	f000 fd5c 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a81      	ldr	r2, [pc, #516]	; (800429c <HAL_I2C_Init+0x274>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d807      	bhi.n	80040ac <HAL_I2C_Init+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a80      	ldr	r2, [pc, #512]	; (80042a0 <HAL_I2C_Init+0x278>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e006      	b.n	80040ba <HAL_I2C_Init+0x92>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <HAL_I2C_Init+0x27c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf94      	ite	ls
 80040b4:	2301      	movls	r3, #1
 80040b6:	2300      	movhi	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0e7      	b.n	8004292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a78      	ldr	r2, [pc, #480]	; (80042a8 <HAL_I2C_Init+0x280>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a6a      	ldr	r2, [pc, #424]	; (800429c <HAL_I2C_Init+0x274>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d802      	bhi.n	80040fc <HAL_I2C_Init+0xd4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	3301      	adds	r3, #1
 80040fa:	e009      	b.n	8004110 <HAL_I2C_Init+0xe8>
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	4a69      	ldr	r2, [pc, #420]	; (80042ac <HAL_I2C_Init+0x284>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	3301      	adds	r3, #1
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	430b      	orrs	r3, r1
 8004116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	495c      	ldr	r1, [pc, #368]	; (800429c <HAL_I2C_Init+0x274>)
 800412c:	428b      	cmp	r3, r1
 800412e:	d819      	bhi.n	8004164 <HAL_I2C_Init+0x13c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e59      	subs	r1, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fbb1 f3f3 	udiv	r3, r1, r3
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004144:	400b      	ands	r3, r1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_I2C_Init+0x138>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1e59      	subs	r1, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fbb1 f3f3 	udiv	r3, r1, r3
 8004158:	3301      	adds	r3, #1
 800415a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415e:	e051      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004160:	2304      	movs	r3, #4
 8004162:	e04f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <HAL_I2C_Init+0x168>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1e58      	subs	r0, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	440b      	add	r3, r1
 800417a:	fbb0 f3f3 	udiv	r3, r0, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e012      	b.n	80041b6 <HAL_I2C_Init+0x18e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e58      	subs	r0, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	0099      	lsls	r1, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Init+0x196>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e022      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <HAL_I2C_Init+0x1bc>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1e58      	subs	r0, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	440b      	add	r3, r1
 80041d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Init+0x1dc>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6911      	ldr	r1, [r2, #16]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	000186a0 	.word	0x000186a0
 80042a0:	001e847f 	.word	0x001e847f
 80042a4:	003d08ff 	.word	0x003d08ff
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	10624dd3 	.word	0x10624dd3

080042b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e264      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d075      	beq.n	80043ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ce:	4ba3      	ldr	r3, [pc, #652]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4ba0      	ldr	r3, [pc, #640]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b9d      	ldr	r3, [pc, #628]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b99      	ldr	r3, [pc, #612]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x108>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e23f      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x74>
 8004316:	4b91      	ldr	r3, [pc, #580]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a90      	ldr	r2, [pc, #576]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x98>
 800432e:	4b8b      	ldr	r3, [pc, #556]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a8a      	ldr	r2, [pc, #552]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b88      	ldr	r3, [pc, #544]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a87      	ldr	r2, [pc, #540]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004348:	4b84      	ldr	r3, [pc, #528]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a83      	ldr	r2, [pc, #524]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a80      	ldr	r2, [pc, #512]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fbca 	bl	8002b00 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fbc6 	bl	8002b00 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e204      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xc0>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe fbb6 	bl	8002b00 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004398:	f7fe fbb2 	bl	8002b00 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1f0      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b6c      	ldr	r3, [pc, #432]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0xe8>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b62      	ldr	r3, [pc, #392]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d11c      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b5f      	ldr	r3, [pc, #380]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c4      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b56      	ldr	r3, [pc, #344]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4952      	ldr	r1, [pc, #328]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e03a      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b4f      	ldr	r3, [pc, #316]	; (8004560 <HAL_RCC_OscConfig+0x2b0>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fe fb6b 	bl	8002b00 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442e:	f7fe fb67 	bl	8002b00 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1a5      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	4b46      	ldr	r3, [pc, #280]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b43      	ldr	r3, [pc, #268]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4940      	ldr	r1, [pc, #256]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	e015      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b3f      	ldr	r3, [pc, #252]	; (8004560 <HAL_RCC_OscConfig+0x2b0>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fb4a 	bl	8002b00 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004470:	f7fe fb46 	bl	8002b00 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e184      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	4b36      	ldr	r3, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d030      	beq.n	80044fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <HAL_RCC_OscConfig+0x2b4>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fe fb2a 	bl	8002b00 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fe fb26 	bl	8002b00 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e164      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	4b26      	ldr	r3, [pc, #152]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x200>
 80044ce:	e015      	b.n	80044fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_OscConfig+0x2b4>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d6:	f7fe fb13 	bl	8002b00 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044de:	f7fe fb0f 	bl	8002b00 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e14d      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b1a      	ldr	r3, [pc, #104]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 80044f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a0 	beq.w	800464a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
 800452a:	4b0c      	ldr	r3, [pc, #48]	; (800455c <HAL_RCC_OscConfig+0x2ac>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_OscConfig+0x2b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d121      	bne.n	800458a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCC_OscConfig+0x2b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_RCC_OscConfig+0x2b8>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fe fad5 	bl	8002b00 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e011      	b.n	800457e <HAL_RCC_OscConfig+0x2ce>
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	42470000 	.word	0x42470000
 8004564:	42470e80 	.word	0x42470e80
 8004568:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fe fac8 	bl	8002b00 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e106      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b85      	ldr	r3, [pc, #532]	; (8004794 <HAL_RCC_OscConfig+0x4e4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d106      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2f0>
 8004592:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a80      	ldr	r2, [pc, #512]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	e01c      	b.n	80045da <HAL_RCC_OscConfig+0x32a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b05      	cmp	r3, #5
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x312>
 80045a8:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6713      	str	r3, [r2, #112]	; 0x70
 80045b4:	4b78      	ldr	r3, [pc, #480]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a77      	ldr	r2, [pc, #476]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
 80045c0:	e00b      	b.n	80045da <HAL_RCC_OscConfig+0x32a>
 80045c2:	4b75      	ldr	r3, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a74      	ldr	r2, [pc, #464]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	4b72      	ldr	r3, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	4a71      	ldr	r2, [pc, #452]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d015      	beq.n	800460e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e2:	f7fe fa8d 	bl	8002b00 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe fa89 	bl	8002b00 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0c5      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCC_OscConfig+0x33a>
 800460c:	e014      	b.n	8004638 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460e:	f7fe fa77 	bl	8002b00 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fa73 	bl	8002b00 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e0af      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	4b5a      	ldr	r3, [pc, #360]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ee      	bne.n	8004616 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463e:	4b56      	ldr	r3, [pc, #344]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	4a55      	ldr	r2, [pc, #340]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004648:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 809b 	beq.w	800478a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d05c      	beq.n	800471a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d141      	bne.n	80046ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004668:	4b4c      	ldr	r3, [pc, #304]	; (800479c <HAL_RCC_OscConfig+0x4ec>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466e:	f7fe fa47 	bl	8002b00 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004676:	f7fe fa43 	bl	8002b00 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e081      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004688:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	019b      	lsls	r3, r3, #6
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	4937      	ldr	r1, [pc, #220]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046be:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_RCC_OscConfig+0x4ec>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe fa1c 	bl	8002b00 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fe fa18 	bl	8002b00 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e056      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x41c>
 80046ea:	e04e      	b.n	800478a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_OscConfig+0x4ec>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fe fa05 	bl	8002b00 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fe fa01 	bl	8002b00 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e03f      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f0      	bne.n	80046fa <HAL_RCC_OscConfig+0x44a>
 8004718:	e037      	b.n	800478a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e032      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <HAL_RCC_OscConfig+0x4e8>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d028      	beq.n	8004786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d121      	bne.n	8004786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d11a      	bne.n	8004786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004756:	4013      	ands	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475e:	4293      	cmp	r3, r2
 8004760:	d111      	bne.n	8004786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	3b01      	subs	r3, #1
 8004770:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40007000 	.word	0x40007000
 8004798:	40023800 	.word	0x40023800
 800479c:	42470060 	.word	0x42470060

080047a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0cc      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b68      	ldr	r3, [pc, #416]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d90c      	bls.n	80047dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b65      	ldr	r3, [pc, #404]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a58      	ldr	r2, [pc, #352]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a52      	ldr	r2, [pc, #328]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d044      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d119      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	2b03      	cmp	r3, #3
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e067      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b37      	ldr	r3, [pc, #220]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4934      	ldr	r1, [pc, #208]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe f936 	bl	8002b00 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe f932 	bl	8002b00 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20c      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b22      	ldr	r3, [pc, #136]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b12      	ldr	r3, [pc, #72]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f821 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe f896 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00
 800495c:	40023800 	.word	0x40023800
 8004960:	08009990 	.word	0x08009990
 8004964:	20000008 	.word	0x20000008
 8004968:	2000000c 	.word	0x2000000c

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	2300      	movs	r3, #0
 800497e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004984:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d00d      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x40>
 8004990:	2b08      	cmp	r3, #8
 8004992:	f200 80bd 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800499e:	e0b7      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b61      	ldr	r3, [pc, #388]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049a2:	60bb      	str	r3, [r7, #8]
       break;
 80049a4:	e0b7      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a6:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049a8:	60bb      	str	r3, [r7, #8]
      break;
 80049aa:	e0b4      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ac:	4b5d      	ldr	r3, [pc, #372]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b6:	4b5b      	ldr	r3, [pc, #364]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04d      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	461a      	mov	r2, r3
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	ea02 0800 	and.w	r8, r2, r0
 80049da:	ea03 0901 	and.w	r9, r3, r1
 80049de:	4640      	mov	r0, r8
 80049e0:	4649      	mov	r1, r9
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	014b      	lsls	r3, r1, #5
 80049ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049f0:	0142      	lsls	r2, r0, #5
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	ebb0 0008 	subs.w	r0, r0, r8
 80049fa:	eb61 0109 	sbc.w	r1, r1, r9
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	018b      	lsls	r3, r1, #6
 8004a08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a0c:	0182      	lsls	r2, r0, #6
 8004a0e:	1a12      	subs	r2, r2, r0
 8004a10:	eb63 0301 	sbc.w	r3, r3, r1
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	00d9      	lsls	r1, r3, #3
 8004a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a22:	00d0      	lsls	r0, r2, #3
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	eb12 0208 	adds.w	r2, r2, r8
 8004a2c:	eb43 0309 	adc.w	r3, r3, r9
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0259      	lsls	r1, r3, #9
 8004a3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a3e:	0250      	lsls	r0, r2, #9
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f7fb ffd8 	bl	8000a04 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e04a      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	ea02 0400 	and.w	r4, r2, r0
 8004a76:	ea03 0501 	and.w	r5, r3, r1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	014b      	lsls	r3, r1, #5
 8004a88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a8c:	0142      	lsls	r2, r0, #5
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	1b00      	subs	r0, r0, r4
 8004a94:	eb61 0105 	sbc.w	r1, r1, r5
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	018b      	lsls	r3, r1, #6
 8004aa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aa6:	0182      	lsls	r2, r0, #6
 8004aa8:	1a12      	subs	r2, r2, r0
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	00d9      	lsls	r1, r3, #3
 8004ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004abc:	00d0      	lsls	r0, r2, #3
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	1912      	adds	r2, r2, r4
 8004ac4:	eb45 0303 	adc.w	r3, r5, r3
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	0299      	lsls	r1, r3, #10
 8004ad2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ad6:	0290      	lsls	r0, r2, #10
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f7fb ff8c 	bl	8000a04 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b12:	60bb      	str	r3, [r7, #8]
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000008 	.word	0x20000008

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a9b      	lsrs	r3, r3, #10
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	080099a0 	.word	0x080099a0

08004b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07b      	b.n	8004c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b92:	d009      	beq.n	8004ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]
 8004b9a:	e005      	b.n	8004ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd fd3c 	bl	8002640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2c:	ea42 0103 	orr.w	r1, r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	f003 0104 	and.w	r1, r3, #4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0210 	and.w	r2, r3, #16
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b088      	sub	sp, #32
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Transmit+0x22>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e126      	b.n	8004ef2 <HAL_SPI_Transmit+0x270>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fd ff28 	bl	8002b00 <HAL_GetTick>
 8004cb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc6:	e10b      	b.n	8004ee0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0x52>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cd8:	e102      	b.n	8004ee0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2203      	movs	r2, #3
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d10f      	bne.n	8004d42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b40      	cmp	r3, #64	; 0x40
 8004d4e:	d007      	beq.n	8004d60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d68:	d14b      	bne.n	8004e02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0xf6>
 8004d72:	8afb      	ldrh	r3, [r7, #22]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d13e      	bne.n	8004df6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d9c:	e02b      	b.n	8004df6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d112      	bne.n	8004dd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	881a      	ldrh	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd0:	e011      	b.n	8004df6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd2:	f7fd fe95 	bl	8002b00 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d803      	bhi.n	8004dea <HAL_SPI_Transmit+0x168>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d102      	bne.n	8004df0 <HAL_SPI_Transmit+0x16e>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df4:	e074      	b.n	8004ee0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1ce      	bne.n	8004d9e <HAL_SPI_Transmit+0x11c>
 8004e00:	e04c      	b.n	8004e9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0x18e>
 8004e0a:	8afb      	ldrh	r3, [r7, #22]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d140      	bne.n	8004e92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e36:	e02c      	b.n	8004e92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d113      	bne.n	8004e6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e6c:	e011      	b.n	8004e92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6e:	f7fd fe47 	bl	8002b00 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d803      	bhi.n	8004e86 <HAL_SPI_Transmit+0x204>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_Transmit+0x20a>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e90:	e026      	b.n	8004ee0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1cd      	bne.n	8004e38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 fbcb 	bl	800563c <SPI_EndRxTxTransaction>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e000      	b.n	8004ee0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b088      	sub	sp, #32
 8004efe:	af02      	add	r7, sp, #8
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f16:	d112      	bne.n	8004f3e <HAL_SPI_Receive+0x44>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10e      	bne.n	8004f3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2204      	movs	r2, #4
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f8f1 	bl	800511c <HAL_SPI_TransmitReceive>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	e0ea      	b.n	8005114 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_SPI_Receive+0x52>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0e3      	b.n	8005114 <HAL_SPI_Receive+0x21a>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f54:	f7fd fdd4 	bl	8002b00 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f6a:	e0ca      	b.n	8005102 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Receive+0x7e>
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f7c:	e0c1      	b.n	8005102 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2204      	movs	r2, #4
 8004f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fe4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d007      	beq.n	8005004 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005002:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d162      	bne.n	80050d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800500c:	e02e      	b.n	800506c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d115      	bne.n	8005048 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f103 020c 	add.w	r2, r3, #12
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005046:	e011      	b.n	800506c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005048:	f7fd fd5a 	bl	8002b00 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d803      	bhi.n	8005060 <HAL_SPI_Receive+0x166>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Receive+0x16c>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	75fb      	strb	r3, [r7, #23]
          goto error;
 800506a:	e04a      	b.n	8005102 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1cb      	bne.n	800500e <HAL_SPI_Receive+0x114>
 8005076:	e031      	b.n	80050dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d113      	bne.n	80050ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	b292      	uxth	r2, r2
 8005092:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050ac:	e011      	b.n	80050d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fd fd27 	bl	8002b00 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_Receive+0x1cc>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_Receive+0x1d2>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050d0:	e017      	b.n	8005102 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1cd      	bne.n	8005078 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa45 	bl	8005570 <SPI_EndRxTransaction>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
 80050fe:	e000      	b.n	8005102 <HAL_SPI_Receive+0x208>
  }

error :
 8005100:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005112:	7dfb      	ldrb	r3, [r7, #23]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	; 0x30
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800512a:	2301      	movs	r3, #1
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x26>
 800513e:	2302      	movs	r3, #2
 8005140:	e18a      	b.n	8005458 <HAL_SPI_TransmitReceive+0x33c>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514a:	f7fd fcd9 	bl	8002b00 <HAL_GetTick>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005168:	2b01      	cmp	r3, #1
 800516a:	d00f      	beq.n	800518c <HAL_SPI_TransmitReceive+0x70>
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005172:	d107      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d103      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x68>
 800517c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005180:	2b04      	cmp	r3, #4
 8005182:	d003      	beq.n	800518c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005184:	2302      	movs	r3, #2
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800518a:	e15b      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_SPI_TransmitReceive+0x82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_TransmitReceive+0x82>
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051a4:	e14e      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d003      	beq.n	80051ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2205      	movs	r2, #5
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	887a      	ldrh	r2, [r7, #2]
 80051ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	887a      	ldrh	r2, [r7, #2]
 80051d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d007      	beq.n	800520e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005216:	d178      	bne.n	800530a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x10a>
 8005220:	8b7b      	ldrh	r3, [r7, #26]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d166      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524a:	e053      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d11b      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x176>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x176>
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d113      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	1c9a      	adds	r2, r3, #2
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d119      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x1b8>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	b292      	uxth	r2, r2
 80052b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052d4:	f7fd fc14 	bl	8002b00 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d807      	bhi.n	80052f4 <HAL_SPI_TransmitReceive+0x1d8>
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d003      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052f2:	e0a7      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1a6      	bne.n	800524c <HAL_SPI_TransmitReceive+0x130>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1a1      	bne.n	800524c <HAL_SPI_TransmitReceive+0x130>
 8005308:	e07c      	b.n	8005404 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_SPI_TransmitReceive+0x1fc>
 8005312:	8b7b      	ldrh	r3, [r7, #26]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d16b      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533e:	e057      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d11c      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x26c>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x26c>
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d114      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	7812      	ldrb	r2, [r2, #0]
 800536a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d119      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x2ae>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c6:	2301      	movs	r3, #1
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053ca:	f7fd fb99 	bl	8002b00 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d803      	bhi.n	80053e2 <HAL_SPI_TransmitReceive+0x2c6>
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2cc>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053ee:	e029      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1a2      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x224>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d19d      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f917 	bl	800563c <SPI_EndRxTxTransaction>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005420:	e010      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10b      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	e000      	b.n	8005444 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005442:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005454:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005458:	4618      	mov	r0, r3
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005470:	f7fd fb46 	bl	8002b00 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005480:	f7fd fb3e 	bl	8002b00 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	0d1b      	lsrs	r3, r3, #20
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	e054      	b.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d050      	beq.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054a0:	f7fd fb2e 	bl	8002b00 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13d      	bne.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ce:	d111      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d8:	d004      	beq.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d107      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d10f      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e017      	b.n	8005562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3b01      	subs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	429a      	cmp	r2, r3
 800555e:	d19b      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000008 	.word	0x20000008

08005570 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005584:	d111      	bne.n	80055aa <SPI_EndRxTransaction+0x3a>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558e:	d004      	beq.n	800559a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d107      	bne.n	80055aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b2:	d12a      	bne.n	800560a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d012      	beq.n	80055e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ff49 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02d      	beq.n	8005630 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e026      	b.n	8005632 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2101      	movs	r1, #1
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ff36 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01a      	beq.n	8005630 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e013      	b.n	8005632 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	2101      	movs	r1, #1
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff ff23 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f043 0220 	orr.w	r2, r3, #32
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e000      	b.n	8005632 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <SPI_EndRxTxTransaction+0x7c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <SPI_EndRxTxTransaction+0x80>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0d5b      	lsrs	r3, r3, #21
 8005654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005666:	d112      	bne.n	800568e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff fef4 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3b01      	subs	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	2b80      	cmp	r3, #128	; 0x80
 80056a6:	d0f2      	beq.n	800568e <SPI_EndRxTxTransaction+0x52>
 80056a8:	e000      	b.n	80056ac <SPI_EndRxTxTransaction+0x70>
        break;
 80056aa:	bf00      	nop
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000008 	.word	0x20000008
 80056bc:	165e9f81 	.word	0x165e9f81

080056c0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e034      	b.n	8005740 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7fb fda4 	bl	8001238 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3308      	adds	r3, #8
 80056f8:	4619      	mov	r1, r3
 80056fa:	4610      	mov	r0, r2
 80056fc:	f001 f860 	bl	80067c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	461a      	mov	r2, r3
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	f001 f8aa 	bl	8006864 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6858      	ldr	r0, [r3, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	f001 f8df 	bl	80068e0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	6892      	ldr	r2, [r2, #8]
 8005736:	f041 0101 	orr.w	r1, r1, #1
 800573a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e041      	b.n	80057de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fd f8c0 	bl	80028f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 fc7a 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d001      	beq.n	8005800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e04e      	b.n	800589e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a23      	ldr	r2, [pc, #140]	; (80058ac <HAL_TIM_Base_Start_IT+0xc4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d022      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d01d      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a19      	ldr	r2, [pc, #100]	; (80058c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x80>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d111      	bne.n	800588c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b06      	cmp	r3, #6
 8005878:	d010      	beq.n	800589c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	e007      	b.n	800589c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40001800 	.word	0x40001800

080058c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e041      	b.n	800595e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f839 	bl	8005966 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 fbba 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x24>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e022      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d109      	bne.n	80059ba <HAL_TIM_PWM_Start+0x3e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	e015      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x58>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e008      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07c      	b.n	8005ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0x82>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x92>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fe10 	bl	8006654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	; (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_PWM_Start+0xcc>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_PWM_Start+0xd0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_Start+0xd2>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_TIM_PWM_Start+0x17c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <HAL_TIM_PWM_Start+0x180>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <HAL_TIM_PWM_Start+0x184>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <HAL_TIM_PWM_Start+0x188>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <HAL_TIM_PWM_Start+0x18c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d010      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e007      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40001800 	.word	0x40001800

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0202 	mvn.w	r2, #2
 8005b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa77 	bl	8006042 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa69 	bl	800602e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fa7a 	bl	8006056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d122      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa4d 	bl	8006042 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa3f 	bl	800602e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa50 	bl	8006056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d122      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d11b      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0208 	mvn.w	r2, #8
 8005be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa23 	bl	8006042 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa15 	bl	800602e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fa26 	bl	8006056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d122      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d11b      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0210 	mvn.w	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9f9 	bl	8006042 <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9eb 	bl	800602e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9fc 	bl	8006056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0201 	mvn.w	r2, #1
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc fc78 	bl	8002580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fd78 	bl	80067ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9c1 	bl	800606a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d10e      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d107      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0220 	mvn.w	r2, #32
 8005d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fd42 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0ae      	b.n	8005e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	f200 809f 	bhi.w	8005e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005e89 	.word	0x08005e89
 8005d58:	08005e89 	.word	0x08005e89
 8005d5c:	08005e89 	.word	0x08005e89
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005e89 	.word	0x08005e89
 8005d68:	08005e89 	.word	0x08005e89
 8005d6c:	08005e89 	.word	0x08005e89
 8005d70:	08005e07 	.word	0x08005e07
 8005d74:	08005e89 	.word	0x08005e89
 8005d78:	08005e89 	.word	0x08005e89
 8005d7c:	08005e89 	.word	0x08005e89
 8005d80:	08005e47 	.word	0x08005e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fa18 	bl	80061c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0208 	orr.w	r2, r2, #8
 8005d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0204 	bic.w	r2, r2, #4
 8005dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6999      	ldr	r1, [r3, #24]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	619a      	str	r2, [r3, #24]
      break;
 8005dc2:	e064      	b.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fa68 	bl	80062a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6999      	ldr	r1, [r3, #24]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	021a      	lsls	r2, r3, #8
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	619a      	str	r2, [r3, #24]
      break;
 8005e04:	e043      	b.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fabd 	bl	800638c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0208 	orr.w	r2, r2, #8
 8005e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0204 	bic.w	r2, r2, #4
 8005e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69d9      	ldr	r1, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	61da      	str	r2, [r3, #28]
      break;
 8005e44:	e023      	b.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 fb11 	bl	8006474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	61da      	str	r2, [r3, #28]
      break;
 8005e86:	e002      	b.n	8005e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIM_ConfigClockSource+0x1c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0b4      	b.n	8006026 <HAL_TIM_ConfigClockSource+0x186>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef4:	d03e      	beq.n	8005f74 <HAL_TIM_ConfigClockSource+0xd4>
 8005ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efa:	f200 8087 	bhi.w	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	f000 8086 	beq.w	8006012 <HAL_TIM_ConfigClockSource+0x172>
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d87f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b70      	cmp	r3, #112	; 0x70
 8005f0e:	d01a      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0xa6>
 8005f10:	2b70      	cmp	r3, #112	; 0x70
 8005f12:	d87b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d050      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x11a>
 8005f18:	2b60      	cmp	r3, #96	; 0x60
 8005f1a:	d877      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b50      	cmp	r3, #80	; 0x50
 8005f1e:	d03c      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0xfa>
 8005f20:	2b50      	cmp	r3, #80	; 0x50
 8005f22:	d873      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d058      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x13a>
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d86f      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d064      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x15a>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d86b      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d060      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x15a>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d867      	bhi.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x15a>
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d05a      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	e062      	b.n	800600c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6899      	ldr	r1, [r3, #8]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f000 fb5d 	bl	8006614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	609a      	str	r2, [r3, #8]
      break;
 8005f72:	e04f      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6899      	ldr	r1, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f000 fb46 	bl	8006614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f96:	609a      	str	r2, [r3, #8]
      break;
 8005f98:	e03c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 faba 	bl	8006520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2150      	movs	r1, #80	; 0x50
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb13 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005fb8:	e02c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 fad9 	bl	800657e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2160      	movs	r1, #96	; 0x60
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fb03 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005fd8:	e01c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 fa9a 	bl	8006520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2140      	movs	r1, #64	; 0x40
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 faf3 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e00c      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 faea 	bl	80065de <TIM_ITRx_SetConfig>
      break;
 800600a:	e003      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      break;
 8006010:	e000      	b.n	8006014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a40      	ldr	r2, [pc, #256]	; (8006194 <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609e:	d00f      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3d      	ldr	r2, [pc, #244]	; (8006198 <TIM_Base_SetConfig+0x118>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3c      	ldr	r2, [pc, #240]	; (800619c <TIM_Base_SetConfig+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3b      	ldr	r2, [pc, #236]	; (80061a0 <TIM_Base_SetConfig+0x120>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a3a      	ldr	r2, [pc, #232]	; (80061a4 <TIM_Base_SetConfig+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d108      	bne.n	80060d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2f      	ldr	r2, [pc, #188]	; (8006194 <TIM_Base_SetConfig+0x114>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02b      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d027      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2c      	ldr	r2, [pc, #176]	; (8006198 <TIM_Base_SetConfig+0x118>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d023      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2b      	ldr	r2, [pc, #172]	; (800619c <TIM_Base_SetConfig+0x11c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01f      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <TIM_Base_SetConfig+0x120>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01b      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a29      	ldr	r2, [pc, #164]	; (80061a4 <TIM_Base_SetConfig+0x124>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d017      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a28      	ldr	r2, [pc, #160]	; (80061a8 <TIM_Base_SetConfig+0x128>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a27      	ldr	r2, [pc, #156]	; (80061ac <TIM_Base_SetConfig+0x12c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00f      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <TIM_Base_SetConfig+0x130>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00b      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <TIM_Base_SetConfig+0x134>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d007      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <TIM_Base_SetConfig+0x138>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d003      	beq.n	8006132 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a23      	ldr	r2, [pc, #140]	; (80061bc <TIM_Base_SetConfig+0x13c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d108      	bne.n	8006144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a0a      	ldr	r2, [pc, #40]	; (8006194 <TIM_Base_SetConfig+0x114>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_Base_SetConfig+0xf8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <TIM_Base_SetConfig+0x124>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d103      	bne.n	8006180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	615a      	str	r2, [r3, #20]
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40010400 	.word	0x40010400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40014400 	.word	0x40014400
 80061b0:	40014800 	.word	0x40014800
 80061b4:	40001800 	.word	0x40001800
 80061b8:	40001c00 	.word	0x40001c00
 80061bc:	40002000 	.word	0x40002000

080061c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0302 	bic.w	r3, r3, #2
 8006208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a20      	ldr	r2, [pc, #128]	; (8006298 <TIM_OC1_SetConfig+0xd8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC1_SetConfig+0x64>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a1f      	ldr	r2, [pc, #124]	; (800629c <TIM_OC1_SetConfig+0xdc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10c      	bne.n	800623e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0308 	bic.w	r3, r3, #8
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 0304 	bic.w	r3, r3, #4
 800623c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a15      	ldr	r2, [pc, #84]	; (8006298 <TIM_OC1_SetConfig+0xd8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_OC1_SetConfig+0x8e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a14      	ldr	r2, [pc, #80]	; (800629c <TIM_OC1_SetConfig+0xdc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d111      	bne.n	8006272 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40010000 	.word	0x40010000
 800629c:	40010400 	.word	0x40010400

080062a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0210 	bic.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0320 	bic.w	r3, r3, #32
 80062ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <TIM_OC2_SetConfig+0xe4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC2_SetConfig+0x68>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a21      	ldr	r2, [pc, #132]	; (8006388 <TIM_OC2_SetConfig+0xe8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10d      	bne.n	8006324 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a17      	ldr	r2, [pc, #92]	; (8006384 <TIM_OC2_SetConfig+0xe4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_OC2_SetConfig+0x94>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a16      	ldr	r2, [pc, #88]	; (8006388 <TIM_OC2_SetConfig+0xe8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d113      	bne.n	800635c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800633a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a21      	ldr	r2, [pc, #132]	; (800646c <TIM_OC3_SetConfig+0xe0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x66>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <TIM_OC3_SetConfig+0xe4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10d      	bne.n	800640e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800640c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a16      	ldr	r2, [pc, #88]	; (800646c <TIM_OC3_SetConfig+0xe0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_OC3_SetConfig+0x92>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <TIM_OC3_SetConfig+0xe4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d113      	bne.n	8006446 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	621a      	str	r2, [r3, #32]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <TIM_OC4_SetConfig+0xa4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_OC4_SetConfig+0x68>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <TIM_OC4_SetConfig+0xa8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d109      	bne.n	80064f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	019b      	lsls	r3, r3, #6
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40010000 	.word	0x40010000
 800651c:	40010400 	.word	0x40010400

08006520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	f023 0201 	bic.w	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 030a 	bic.w	r3, r3, #10
 800655c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f023 0210 	bic.w	r2, r3, #16
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	031b      	lsls	r3, r3, #12
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f043 0307 	orr.w	r3, r3, #7
 8006600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	609a      	str	r2, [r3, #8]
}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	021a      	lsls	r2, r3, #8
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	431a      	orrs	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4313      	orrs	r3, r2
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2201      	movs	r2, #1
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a1a      	ldr	r2, [r3, #32]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	43db      	mvns	r3, r3
 8006676:	401a      	ands	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1a      	ldr	r2, [r3, #32]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	fa01 f303 	lsl.w	r3, r1, r3
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e05a      	b.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a21      	ldr	r2, [pc, #132]	; (800677c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d01d      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1a      	ldr	r2, [pc, #104]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a18      	ldr	r2, [pc, #96]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a17      	ldr	r2, [pc, #92]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a15      	ldr	r2, [pc, #84]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10c      	bne.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40000400 	.word	0x40000400
 8006784:	40000800 	.word	0x40000800
 8006788:	40000c00 	.word	0x40000c00
 800678c:	40010400 	.word	0x40010400
 8006790:	40014000 	.word	0x40014000
 8006794:	40001800 	.word	0x40001800

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4b20      	ldr	r3, [pc, #128]	; (8006860 <FSMC_NORSRAM_Init+0xa0>)
 80067de:	4013      	ands	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80067ea:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80067f0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80067f6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80067fc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006802:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006808:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800680e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006814:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800681a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006820:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006826:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800682c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d103      	bne.n	8006844 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006842:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	fff00080 	.word	0xfff00080

08006864 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006886:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006892:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800689a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80068a2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80068ac:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	3b02      	subs	r3, #2
 80068b4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80068b6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80068bc:	4313      	orrs	r3, r2
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6979      	ldr	r1, [r7, #20]
 80068cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f8:	d122      	bne.n	8006940 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006908:	4013      	ands	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006916:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800691e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006926:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800692c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800693e:	e005      	b.n	800694c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	cff00000 	.word	0xcff00000

08006960 <__libc_init_array>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4d0d      	ldr	r5, [pc, #52]	; (8006998 <__libc_init_array+0x38>)
 8006964:	4c0d      	ldr	r4, [pc, #52]	; (800699c <__libc_init_array+0x3c>)
 8006966:	1b64      	subs	r4, r4, r5
 8006968:	10a4      	asrs	r4, r4, #2
 800696a:	2600      	movs	r6, #0
 800696c:	42a6      	cmp	r6, r4
 800696e:	d109      	bne.n	8006984 <__libc_init_array+0x24>
 8006970:	4d0b      	ldr	r5, [pc, #44]	; (80069a0 <__libc_init_array+0x40>)
 8006972:	4c0c      	ldr	r4, [pc, #48]	; (80069a4 <__libc_init_array+0x44>)
 8006974:	f000 f820 	bl	80069b8 <_init>
 8006978:	1b64      	subs	r4, r4, r5
 800697a:	10a4      	asrs	r4, r4, #2
 800697c:	2600      	movs	r6, #0
 800697e:	42a6      	cmp	r6, r4
 8006980:	d105      	bne.n	800698e <__libc_init_array+0x2e>
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	f855 3b04 	ldr.w	r3, [r5], #4
 8006988:	4798      	blx	r3
 800698a:	3601      	adds	r6, #1
 800698c:	e7ee      	b.n	800696c <__libc_init_array+0xc>
 800698e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006992:	4798      	blx	r3
 8006994:	3601      	adds	r6, #1
 8006996:	e7f2      	b.n	800697e <__libc_init_array+0x1e>
 8006998:	080099b8 	.word	0x080099b8
 800699c:	080099b8 	.word	0x080099b8
 80069a0:	080099b8 	.word	0x080099b8
 80069a4:	080099bc 	.word	0x080099bc

080069a8 <memset>:
 80069a8:	4402      	add	r2, r0
 80069aa:	4603      	mov	r3, r0
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d100      	bne.n	80069b2 <memset+0xa>
 80069b0:	4770      	bx	lr
 80069b2:	f803 1b01 	strb.w	r1, [r3], #1
 80069b6:	e7f9      	b.n	80069ac <memset+0x4>

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
